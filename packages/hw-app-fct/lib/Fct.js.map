{"version":3,"sources":["../src/Fct.js"],"names":["Fct","transport","decorateAppAPIMethods","path","boolDisplay","boolChainCode","bipPath","BIPPath","fromString","toPathArray","buffer","Buffer","alloc","length","boolIdAddr","writeInt8","forEach","segment","index","writeUInt32BE","send","then","result","publicKeyLength","response","addressLength","publicKey","slice","toString","address","chainidstart","chaincode","chainid","rawTxHex","paths","offset","rawTx","toSend","maxChunkSize","chunkSize","element","copy","push","data","i","apduResponse","r","rcdType","v","readUInt16BE","s","signature","ischaincommit","p1","p2","k","rawMessage","tosha512","l","readUInt8","h","hash","chainIdHex","fattype","fattxbuffer","Error","arbitraryDataEnabled","version"],"mappings":"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","file":"Fct.js","sourcesContent":["/********************************************************************************\n *   Ledger Node JS API for Factom\n *   (c) 2018 The Factoid Authority \n *            ledger@factoid.org\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n ********************************************************************************/\n//@flow\n\nimport { splitPath, foreach } from \"./utils\";\nimport type Transport from \"@ledgerhq/hw-transport\";\nimport BIPPath from \"bip32-path\";\n\n/**\n * MyFactomWallet Ledger API\n *\n * @example\n * import Fct from \"@factoid.org/hw-app-fct\";\n * const fct = new Fct(transport)\n */\nexport default class Fct {\n  transport: Transport<*>;\n\n  constructor(transport: Transport<*>) {\n    this.transport = transport;\n    transport.decorateAppAPIMethods(\n      this,\n      [\"getAddress\", \"signTransaction\", \"signCommit\", \"signMessageRaw\", \"signMessageHash\", \"signFatTransaction\", \"storeChainId\", \"getAppConfiguration\"],\n      \"TFA\"\n    );\n  }\n\n  /**\n   * get Factom address for a given BIP 32 path.\n   * @param path a path in BIP 32 format (note: all paths muth be hardened (e.g. .../0'/0' )\n   * @option boolDisplay if true, optionally display the address on the device \n   * @return an object with a publicKey and address with optional chainCode and chainid\n   * @example\n   * const fctaddr = await fct.getAddress(\"44'/131'/0'/0/0\")\n   * const ecaddr = await fct.getAddress(\"44'/132'/0'/0/0\")\n   * const idaddr = await fct.getAddress(\"44'/281'/0'/0/0\")\n   */\n  \n  getAddress(\n    path: string,\n    boolDisplay?: boolean,\n    boolChainCode?: boolean\n  ): Promise<{\n    publicKey: string,\n    address: string,\n    chaincode: string,\n    chainid : string\n  }> {\n    const bipPath = BIPPath.fromString(path).toPathArray();\n\n    let buffer = new Buffer.alloc(1 + bipPath.length * 4);\n    const boolIdAddr = (bipPath[1] === 0x80000119)\n    \n    buffer.writeInt8(bipPath.length, 0);\n    bipPath.forEach((segment, index) => {\n      buffer.writeUInt32BE(segment, 1 + index * 4);\n    });\n\n    return this.transport\n      .send(\n        0xe0,\n        0x02,\n        boolDisplay || false ? 0x01 : 0x00,\n        boolChainCode || false ? 0x01 : 0x00,\n        buffer\n      )\n      .then(response => {\n        let result = {};\n        let publicKeyLength = response[0];\n        let addressLength = response[1 + publicKeyLength];\n        result.publicKey = response\n          .slice(1, 1 + publicKeyLength)\n          .toString(\"hex\")\n        result.address =\n          response\n            .slice(\n              1 + publicKeyLength + 1,\n              1 + publicKeyLength + 1 + addressLength\n            )\n            .toString(\"ascii\")\n        let chainidstart = 0\n        result.chaincode = \"\"\n        result.chainid = \"\"\n        \n        if ( boolChainCode || false ) {\n          result.chaincode = response\n            .slice(\n              1 + publicKeyLength + 1 + addressLength,\n              1 + publicKeyLength + 1 + addressLength + 32\n            ).toString(\"hex\")\n          chainidstart = 32\n        } \n        \n        if (boolIdAddr) {\n           result.chainid = response.\n             slice( 1 + publicKeyLength + 1 + addressLength + chainidstart,\n                    1 + publicKeyLength + 1 + addressLength + chainidstart + 32 ).\n             toString(\"hex\")\n        }\n        \n        return result\n      });\n  }\n\n  /**\n   * You can sign a transaction and retrieve v, r, s given the raw transaction and the BIP 32 path of the account to sign\n   * @param path a path in BIP 32 format (note: all paths muth be hardened (e.g. .../0'/0' )\n   * @param rawTxHex The raw fct transaction request\n   * @example\n   const result = await fct.signTransaction(\"44'/131'/0'/0/0\", \"02016253dfaa7301010087db406ff65cb9dd72a1e99bcd51da5e03b0ccafc237dbf1318a8d7438e22371c892d6868d20f02894db071e2eb38fdc56c697caaeba7dc19bddae2c6e7084cc3120d667b49f\")\n   */\n  signTransaction(\n    path: string,\n    rawTxHex: string /*change to tx: Transation */\n  ): Promise<{\n    v: string,\n    r: string,\n    s: string\n  }> {\n    let paths = splitPath(path);\n    let offset = 0;\n    let rawTx = new Buffer(rawTxHex, \"hex\");\n    let toSend = [];\n    let response;\n    while (offset !== rawTx.length) {\n      let maxChunkSize = offset === 0 ? 150 - 1 - paths.length * 4 : 150 \n      let chunkSize =\n        offset + maxChunkSize > rawTx.length\n          ? rawTx.length - offset\n          : maxChunkSize;\n      let buffer = new Buffer(\n        offset === 0 ? 1 + paths.length * 4 + chunkSize : chunkSize\n      );\n      if (offset === 0) {\n        buffer[0] = paths.length;\n        paths.forEach((element, index) => {\n          buffer.writeUInt32BE(element, 1 + 4 * index);\n        });\n        rawTx.copy(buffer, 1 + 4 * paths.length, offset, offset + chunkSize);\n      } else {\n        rawTx.copy(buffer, 0, offset, offset + chunkSize)\n      }\n      toSend.push(buffer)\n      offset += chunkSize\n    }\n    return foreach(toSend, (data, i) =>\n      this.transport\n        .send(0xe0, 0x04, i === 0 ? 0x00 : 0x80, i === toSend.length-1 ? 0x01 : 0x00, data)\n        .then(apduResponse => {\n          response = apduResponse;\n        })\n    ).then(() => {\n      \n      const r = response.slice(0, 33).toString('hex')\n      const rcdType = response.slice(0, 1).toString('hex')\n      const publicKey = response.slice(1, 33).toString('hex')\n\n      //length of signature should be 64\n      const v = response.slice(33, 33 + 2).readUInt16BE(0)\n      //signature\n      const s = response.slice(35, 35 + v ).toString('hex')\n      let signature = s\n      return { v, r, s, rcdType, publicKey, signature }\n    });\n  }\n\n  /**\n   * You can sign an entry or chain commit and retrieve publicKey(k) and signature(s) given the raw transaction and the BIP 32 path of the account to sign\n   * @param path a path in BIP 32 format (note: all paths muth be hardened (e.g. .../0'/0' )\n   * @param rawTxHex this is the ledger for a entry or chain commit\n   * @param ischaincommit set this to true if the rawTxHex is a chain commit ledger.\n   * @example\n   fct.signCommit(\"44'/132'/0'/0/0\", \"00016227acddfe57cf6740c4f30ae39d71f75710fb4ea9c843d5c01755329a42ccab52034e1f7901d5b8efdb52a15c4007d341eb1193903a021ed7aaa9a3cf4234c32ef8a213de00\",false).then(result => ...)\n   */\n  signCommit(\n    path: string,\n    rawTxHex: string, \n    ischaincommit?: boolean\n  ): Promise<{\n    k: string,\n    s: string\n  }> {\n    const bipPath = BIPPath.fromString(path).toPathArray();\n    let offset = 0\n    let p1 = 0\n    let p2 = ischaincommit || 0\n    let rawTx = new Buffer(rawTxHex, \"hex\")\n    let toSend = []\n    let response\n    while (offset !== rawTx.length) {\n      let maxChunkSize = offset === 0 ? 150 - 1 - bipPath.length * 4 : 150;\n      let chunkSize =\n        offset + maxChunkSize > rawTx.length\n          ? rawTx.length - offset\n          : maxChunkSize\n      let buffer = new Buffer(\n        offset === 0 ? 1 + bipPath.length * 4 + chunkSize : chunkSize\n      )\n      if (offset === 0) {\n        buffer.writeInt8(bipPath.length, 0);\n        bipPath.forEach((segment, index) => {\n          buffer.writeUInt32BE(segment, 1 + index * 4);\n        });\n\n        rawTx.copy(buffer, 1 + 4 * bipPath.length, offset, offset + chunkSize)\n      } else {\n        rawTx.copy(buffer, 0, offset, offset + chunkSize)\n      }\n      toSend.push(buffer)\n      offset += chunkSize\n    }\n    return foreach(toSend, (data, i) =>\n      this.transport\n        .send(0xe0, 0x12, i === 0 ? 0x00 : 0x80, (i === toSend.length-1 ? 0x02 : 0x00) | (p2 ? 0x01 : 0x00) , data)\n        .then(apduResponse => {\n          response = apduResponse;\n        })\n    ).then(() => {\n      \n      const k = response.slice(0, 32).toString('hex')\n      //length of signature should be 64\n      const v = response.slice(32, 32 + 2).readUInt16BE(0)\n      //signature\n      const s = response.slice(34, 34 + v ).toString('hex')\n      let publicKey = k\n      let signature = s\n      return { k, s, publicKey, signature }\n    })\n  }\n\n /**\n   * You can sign an arbitrary message and retrieve v, k, s given the raw transaction and the BIP 32 path of the account to sign\n   * The message will be automatically hashed by the device using either sha256 (default) or sha512 if tosha512 is set to true.\n   * If coin types 131 or 132 are used \"FCT Signed Message\\n\" or \"EC Signed Message\\n\" is prepended to the message inside the ledger\n   * prior to the device hashing then signing the hash.  If the identity coin type 281 is used, then the message is directly hashed\n   * then signed by the ledger.\n   * @param path a path in BIP 32 format (note: all paths muth be hardened (e.g. .../0'/0' )\n   * @param rawMessage this is the raw data Buffer to be signed\n   * @param tosha512 set this to true to hash the rawMessage using sha512, the default (or false) is sha256.\n   * @example\n   fct.signMessageHash(\"44'/281'/0'/0/0\", \"The quick brown fox jumps over the lazy dog.\",true).then(result => ...)\n   */\n  signMessageHash(\n    path: string,\n    rawMessage: Buffer, \n    tosha512?: boolean\n  ): Promise<{\n    k: string,\n    s: string,\n    h: string\n  }> {\n    const bipPath = BIPPath.fromString(path).toPathArray();\n    let offset = 0\n    let p1 = 0\n    let p2 = tosha512 || 0\n    let rawTx = rawMessage\n    let toSend = []\n    let response\n\n    while (offset !== rawTx.length) {\n      let maxChunkSize = offset === 0 ? 150 - 1 - bipPath.length * 4 : 150;\n      let chunkSize =\n        offset + maxChunkSize > rawTx.length\n          ? rawTx.length - offset\n          : maxChunkSize\n      let buffer = new Buffer(\n        offset === 0 ? 1 + bipPath.length * 4 + chunkSize : chunkSize\n      )\n      if (offset === 0) {\n        buffer.writeInt8(bipPath.length, 0);\n        bipPath.forEach((segment, index) => {\n          buffer.writeUInt32BE(segment, 1 + index * 4);\n        });\n        rawTx.copy(buffer, 1 + 4 * bipPath.length, offset, offset + chunkSize)\n      } else {\n        rawTx.copy(buffer, 0, offset, offset + chunkSize)\n      }\n      toSend.push(buffer)\n      offset += chunkSize\n    }\n    return foreach(toSend, (data, i) =>\n      this.transport\n        .send(0xe0, 0x14, i === 0 ? 0x00 : 0x80, (i === toSend.length-1 ? 0x02 : 0x00) | (p2 ? 0x01 : 0x00) , data)\n        .then(apduResponse => {\n          response = apduResponse;\n        })\n    ).then(() => {\n      \n      const k = response.slice(0, 32).toString('hex')\n      //length of signature should be 64\n      const v = response.slice(32, 32 + 2).readUInt16BE(0)\n      //signature\n      const s = response.slice(34, 34 + v ).toString('hex')\n      const l = response.slice(34 + v, 34 + v + 2).readUInt8(0);\n      //hash\n      const h = response.slice(36 + v, 36 + v + l).toString('hex')\n\n      let publicKey = k\n      let signature = s\n      let hash = h\n      return { k, s, h, publicKey, signature, hash }\n    })\n  }\n\n  /**\n   * You can sign an entry or chain commit and retrieve v, k, s given the raw transaction and the BIP 32 path of the account to sign\n   * @param path a path in BIP 32 format (note: all paths muth be hardened (e.g. .../0'/0' )\n   * @param rawTxHex this is the ledger for a entry or chain commit\n   * @param ischaincommit set this to true if the rawTxHex is a chain commit ledger.\n   * @example\n   fct.storeChainId(\"44'/132'/0'/0'/0\", \"00016227acddfe57cf6740c4f30ae39d71f75710fb4ea9c843d5c01755329a42ccab52034e1f7901d5b8efdb52a15c4007d341eb1193903a021ed7aaa9a3cf4234c32ef8a213de00\",false).then(result => ...)\n   */\n\n  storeChainId(\n    chainIdHex: string\n  ): Promise<{\n  }> {\n    let p1 = 0\n    let p2 = 0\n    let rawTx = new Buffer(chainIdHex, \"hex\")\n    let toSend = []\n    let response\n\n    toSend.push(rawTx)\n      \n    return foreach(toSend, (data, i) =>\n      this.transport\n        .send(0xe0, 0x18, p1, p2 , data)\n        .then(apduResponse => {\n          response = apduResponse;\n        })\n    ).then(() => {\n      return { }\n    })\n  }\n\n    /**\n   * This function will sign a raw message using the identity coin type only.  Attempts to sign with FCT or EC addresses will\n   * be rejected by the device.\n   * @param path a path in BIP 32 format \n   * @param rawMessage this is the raw data Buffer to be signed\n   * @example\n   fct.signMessageRaw(\"44'/281'/0'/0/0\", \"The quick brown fox jumps over the lazy dog.\").then(result => ...)\n   */\n  signMessageRaw(\n    path: string,\n    rawMessage: Buffer\n  ): Promise<{\n    s: string,\n    v: string,\n    r: string\n  }> {\n    const bipPath = BIPPath.fromString(path).toPathArray();\n    let offset = 0\n    let p1 = 0\n    let p2 = 0\n    let rawTx = rawMessage\n    let toSend = []\n    let response\n    while (offset !== rawTx.length) {\n      let maxChunkSize = offset === 0 ? 150 - 1 - bipPath.length * 4 : 150;\n      let chunkSize =\n        offset + maxChunkSize > rawTx.length\n          ? rawTx.length - offset\n          : maxChunkSize\n      let buffer = new Buffer(\n        offset === 0 ? 1 + bipPath.length * 4 + chunkSize : chunkSize\n      )\n      if (offset === 0) {\n        buffer.writeInt8(bipPath.length, 0);\n        bipPath.forEach((segment, index) => {\n          buffer.writeUInt32BE(segment, 1 + index * 4);\n        });\n        rawTx.copy(buffer, 1 + 4 * bipPath.length, offset, offset + chunkSize)\n      } else {\n        rawTx.copy(buffer, 0, offset, offset + chunkSize)\n      }\n      toSend.push(buffer)\n      offset += chunkSize\n    }\n    return foreach(toSend, (data, i) =>\n      this.transport\n        .send(0xe0, 0x16, i === 0 ? 0x00 : 0x80, (i === toSend.length-1 ? 0x01 : 0x00), data)\n        .then(apduResponse => {\n          response = apduResponse;\n        })\n    ).then(() => {\n      \n      const k = response.slice(0, 32).toString('hex')\n      //length of signature should be 64\n      const v = response.slice(32, 32 + 2).readUInt16BE(0)\n      //signature\n      const s = response.slice(34, 34 + v ).toString('hex')\n      //const l = response.slice(34 + v, 34 + v + 2).readUInt8(0);\n      //const h = response.slice(36 + v, 36 + v + l).toString('hex') \n      let publicKey = k\n      let signature = s\n      return { v, k, s, publicKey, signature }\n    })\n  }\n\n      \n    /**\n   * This function will sign a FAT 0 or 1 transaction using the Factoid Address.  \n   * @param path a path in BIP 32 format \n   * @param fattype FAT protocol transaction type index 0: FAT-0, 1: FAT-1\n   * @param fattxraw this is the raw data fat transaction to be hashed then signed by device, Buffer.concat([index, timestamp, chainId, content])\n   * @example\n   fct.signFatTransaction(\"44'/131'/0'/0/0\", \"The quick brown fox jumps over the lazy dog.\").then(result => ...)\n   */\n  signFatTransaction(\n    path: string,\n    fattype: number,\n    fattxbuffer : Buffer\n  ): Promise<{\n    s: string,\n    v: string,\n    r: string\n  }> {\n    const bipPath = BIPPath.fromString(path).toPathArray();\n    let offset = 0\n    let p1 = 0\n    let p2 = fattype\n    if ( p2 > 255 || p2 < 0 ) {\n        throw new Error(\"Invalid Transaction Type: FAT Transaction Type must be < 256 and >= 0\")\n    }\n    let rawTx = fattxbuffer\n    let toSend = []\n    let response\n    while (offset !== rawTx.length) {\n      let maxChunkSize = offset === 0 ? 150 - 1 - bipPath.length * 4 : 150;\n      let chunkSize =\n        offset + maxChunkSize > rawTx.length\n          ? rawTx.length - offset\n          : maxChunkSize\n      let buffer = new Buffer(\n        offset === 0 ? 1 + bipPath.length * 4 + chunkSize : chunkSize\n      )\n      if (offset === 0) {\n        buffer.writeInt8(bipPath.length, 0);\n        bipPath.forEach((segment, index) => {\n          buffer.writeUInt32BE(segment, 1 + index * 4);\n        });\n        rawTx.copy(buffer, 1 + 4 * bipPath.length, offset, offset + chunkSize)\n      } else {\n        rawTx.copy(buffer, 0, offset, offset + chunkSize)\n      }\n      toSend.push(buffer)\n      offset += chunkSize\n    }\n    return foreach(toSend, (data, i) =>\n      this.transport\n        .send(0xe0, 0x20, i === 0 ? 0x00 : (i === toSend.length-1 ? 0x81 : 0x80), p2, data)\n        .then(apduResponse => {\n          response = apduResponse;\n        })\n    ).then(() => {\n      \n      //const k = response.slice(0, 32).toString('hex')\n      //length of signature should be 64\n      //const v = response.slice(32, 32 + 2).readUInt16BE(0)\n      //signature\n      //const s = response.slice(34, 34 + v ).toString('hex')\n      //const l = response.slice(34 + v, 34 + v + 2).readUInt8(0);\n      //hash\n\n      \n      const rcdType = response.slice(0, 1).toString('hex')\n      const publicKey = response.slice(1, 33).toString('hex')\n      //length of signature should be 64\n      const v = response.slice(33, 33 + 2).readUInt16BE(0)\n      //signature\n      const signature = response.slice(35, 35 + v ).toString('hex')\n      \n      //hash\n      //const l = response.slice(34 + v, 34 + v + 2).readUInt8(0);\n      //const l = response.slice(36, 36 + v).readUInt16BE(0)\n      const hash = response.slice(35 + v, 35 + v + 64 ).toString('hex')\n      return { rcdType, publicKey, signature, hash }\n      \n      \n      //return { k, s, h }\n    })\n  }\n  \n  /**\n   */\n  getAppConfiguration(): Promise<{\n    arbitraryDataEnabled: number,\n    version: string\n  }> {\n    return this.transport.send(0xe0, 0x06, 0x00, 0x00).then(response => {\n      let result = {};\n      result.arbitraryDataEnabled = response[0] & 0x01;\n      result.version = \"\" + response[1] + \".\" + response[2] + \".\" + response[3];\n      return result;\n    })\n  }\n}\n"]}