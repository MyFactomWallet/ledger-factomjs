{"version":3,"sources":["../src/testFctIdHashSign.js"],"names":["require","Entry","validateEntryInstance","composeEntry","composeEntryLedger","transport","fct","Fct","path","ecBuffer","Buffer","fromString","console","log","ecbuffer","toString","signMessageHash","result","sha256","hex","nacl","detached","verify","sha512","out"],"mappings":";;;;;;;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;;;eAC2EA,QAAS,kBAAT,C;IAAnEC,K,YAAAA,K;IAAOC,qB,YAAAA,qB;IAAuBC,Y,YAAAA,Y;IAAcC,kB,YAAAA,kB;;;uFAErC,iBAAMC,SAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AACPC,qBADO,GACD,IAAIC,kBAAJ,CAAQF,SAAR,CADC;AAEPG,sBAFO,GAEA,iBAFA;AAIPC,0BAJO,GAIIC,OAAOC,UAAP,CAAkB,6CAAlB,CAJJ;;;AAMbC,0BAAQC,GAAR,CAAY,iDAAZ;AACAD,0BAAQC,GAAR,CAAYC,SAASC,QAAT,CAAkB,KAAlB,CAAZ;AACAH,0BAAQC,GAAR,CAAY,+CAAZ;AACF;AATe;AAAA,yBAUMP,IAAIU,eAAJ,CAAoBR,IAApB,EAA0BM,SAASC,QAAT,CAAkB,KAAlB,CAA1B,EAAoD,KAApD,CAVN;;AAAA;AAUTE,wBAVS;;AAAA,wBAWRA,OAAO,GAAP,KAAeC,gBAAOC,GAAP,CAAWL,SAASC,QAAT,EAAX,CAXP;AAAA;AAAA;AAAA;;AAYVH,0BAAQC,GAAR,CAAY,2BAAZ;AAZU,wBAaJ,0BAbI;;AAAA;AAeVD,0BAAQC,GAAR,CAAY,8BAAZ;;AAfU;AAAA,uBAiBVO,KAAKC,QAAL,CAAcC,MAAd,CAAqBL,OAAO,GAAP,CAArB,EAAkCA,OAAO,GAAP,CAAlC,EAA+CA,OAAO,GAAP,CAA/C,CAjBU;AAAA;AAAA;AAAA;;AAkBRL,0BAAQC,GAAR,CAAY,mCAAZ;AAlBQ;AAAA;;AAAA;AAoBRD,0BAAQC,GAAR,CAAY,uCAAZ;AApBQ,wBAqBF,4BArBE;;AAAA;;AA2BbD,0BAAQC,GAAR,CAAY,mCAAZ;AACAD,0BAAQC,GAAR,CAAYI,MAAZ;AACAL,0BAAQC,GAAR,CAAY,mCAAZ;;AAEA;AA/Ba;AAAA,yBAgCEP,IAAIU,eAAJ,CAAoBR,IAApB,EAA0BM,SAASC,QAAT,CAAkB,KAAlB,CAA1B,EAAoD,IAApD,CAhCF;;AAAA;AAgCbE,wBAhCa;;AAAA,wBAiCRA,OAAO,GAAP,KAAeM,gBAAOJ,GAAP,CAAWL,SAASC,QAAT,EAAX,CAjCP;AAAA;AAAA;AAAA;;AAkCVH,0BAAQC,GAAR,CAAY,2BAAZ;AAlCU,wBAmCJ,0BAnCI;;AAAA;AAqCVD,0BAAQC,GAAR,CAAY,8BAAZ;;AArCU;AAAA,uBAuCVO,KAAKC,QAAL,CAAcC,MAAd,CAAqBL,OAAO,GAAP,CAArB,EAAkCA,OAAO,GAAP,CAAlC,EAA+CA,OAAO,GAAP,CAA/C,CAvCU;AAAA;AAAA;AAAA;;AAwCVL,0BAAQC,GAAR,CAAY,mCAAZ;AAxCU;AAAA;;AAAA;AA0CVD,0BAAQC,GAAR,CAAY,uCAAZ;AA1CU,wBA2CJ,4BA3CI;;AAAA;AAAA,mDA+CNW,GA/CM;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,I","file":"testFctIdHashSign.js","sourcesContent":["import Fct from '@factoid.org/hw-app-fct'\nimport sha512 from 'js-sha512'\nimport sha256 from 'js-sha256'\nconst { Entry, validateEntryInstance, composeEntry, composeEntryLedger } = require( 'factom/src/entry' )\n\nexport default async transport => {\n  const fct = new Fct(transport);\n  const path = \"44'/281'/0'/0/0\"\n\n  const ecBuffer = Buffer.fromString('The quick brown fox jumps over the lazy dog');\n  \n  console.log('========== Entry Commit Ledger Begin ==========')\n  console.log(ecbuffer.toString('hex'))\n  console.log('========== Entry Commit Ledger End ==========')\n//sha256\n  let result = await fct.signMessageHash(path, ecbuffer.toString('hex'), false)\n  if ( result['h'] != sha256.hex(ecbuffer.toString()) ) {\n     console.log(\"SHA256 Hash is invalid!!!\")\n     throw(\"Invalid hash from device\")\n  } else {\n     console.log(\"Hash from device is valid!!!\")\n  }\n  if(nacl.detached.verify(result['h'], result['s'], result['k'])) {\n       console.log(\"Transaction Signature is valid!!!\")\n    } else {\n       console.log(\"Transaction Signature is NOT valid!!!\")\n       throw(\"Invalid Identity Signature\")\n    }\n\n\n\n\n  console.log('========== Signed Hash ==========')\n  console.log(result)\n  console.log('==========-------------==========')\n\n  //sha512\n  result = await fct.signMessageHash(path, ecbuffer.toString('hex'), true)\n  if ( result['h'] != sha512.hex(ecbuffer.toString()) ) {\n     console.log(\"SHA512 Hash is invalid!!!\")\n     throw(\"Invalid hash from device\")\n  } else {\n     console.log(\"Hash from device is valid!!!\")\n  }\n  if(nacl.detached.verify(result['h'], result['s'], result['k'])) {\n     console.log(\"Transaction Signature is valid!!!\")\n  } else {\n     console.log(\"Transaction Signature is NOT valid!!!\")\n     throw(\"Invalid Identity Signature\")\n  }\n\n\n  return out\n}\n"]}