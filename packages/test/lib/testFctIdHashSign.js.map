{"version":3,"sources":["../src/testFctIdHashSign.js"],"names":["require","Entry","validateEntryInstance","composeEntry","composeEntryLedger","nacl","sign","transport","fct","Fct","path","ecBuffer","Buffer","from","signMessageHash","result","detached","verify","sha256","hex","console","log","sha512"],"mappings":";;;;;;;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;;;eAC2EA,QAAS,kBAAT,C;IAAnEC,K,YAAAA,K;IAAOC,qB,YAAAA,qB;IAAuBC,Y,YAAAA,Y;IAAcC,kB,YAAAA,kB;;AACpD,IAAMC,OAAOL,QAAQ,qBAAR,EAA+BM,IAA5C;;;uFAEe,iBAAMC,SAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AACPC,qBADO,GACD,IAAIC,kBAAJ,CAAQF,SAAR,CADC;AAEPG,sBAFO,GAEA,iBAFA;AAIPC,0BAJO,GAIIC,OAAOC,IAAP,CAAY,6CAAZ,CAJJ;;AAMb;;AANa;AAAA,yBAOML,IAAIM,eAAJ,CAAoBJ,IAApB,EAA0BC,QAA1B,EAAoC,KAApC,CAPN;;AAAA;AAOTI,wBAPS;;AAAA,uBASVV,KAAKW,QAAL,CAAcC,MAAd,CAAqBL,OAAOC,IAAP,CAAYK,gBAAOC,GAAP,CAAWR,QAAX,CAAZ,EAAiC,KAAjC,CAArB,EAA8DC,OAAOC,IAAP,CAAYE,OAAO,GAAP,CAAZ,EAAwB,KAAxB,CAA9D,EAA8FH,OAAOC,IAAP,CAAYE,OAAO,GAAP,CAAZ,EAAwB,KAAxB,CAA9F,CATU;AAAA;AAAA;AAAA;;AAURK,0BAAQC,GAAR,CAAY,mCAAZ;AAVQ;AAAA;;AAAA;AAYRD,0BAAQC,GAAR,CAAY,uCAAZ;AAZQ,wBAaF,4BAbE;;AAAA;AAAA;AAAA,yBAmBEb,IAAIM,eAAJ,CAAoBJ,IAApB,EAA0BC,QAA1B,EAAoC,IAApC,CAnBF;;AAAA;AAmBbI,wBAnBa;;AAAA,uBAqBVV,KAAKW,QAAL,CAAcC,MAAd,CAAqBL,OAAOC,IAAP,CAAYS,gBAAOH,GAAP,CAAWR,QAAX,CAAZ,EAAiC,KAAjC,CAArB,EAA8DC,OAAOC,IAAP,CAAYE,OAAO,GAAP,CAAZ,EAAwB,KAAxB,CAA9D,EAA8FH,OAAOC,IAAP,CAAYE,OAAO,GAAP,CAAZ,EAAwB,KAAxB,CAA9F,CArBU;AAAA;AAAA;AAAA;;AAsBVK,0BAAQC,GAAR,CAAY,mCAAZ;AAtBU;AAAA;;AAAA;AAwBVD,0BAAQC,GAAR,CAAY,uCAAZ;AAxBU,wBAyBJ,4BAzBI;;AAAA;AAAA,mDA6BNN,MA7BM;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,I","file":"testFctIdHashSign.js","sourcesContent":["import Fct from '@factoid.org/hw-app-fct'\nimport sha512 from 'js-sha512'\nimport sha256 from 'js-sha256'\nconst { Entry, validateEntryInstance, composeEntry, composeEntryLedger } = require( 'factom/src/entry' )\nconst nacl = require('tweetnacl/nacl-fast').sign\n\nexport default async transport => {\n  const fct = new Fct(transport);\n  const path = \"44'/281'/0'/0/0\"\n\n  const ecBuffer = Buffer.from('The quick brown fox jumps over the lazy dog');\n  \n  //sign a sha256 of message using identity key\n  let result = await fct.signMessageHash(path, ecBuffer, false)\n\n  if(nacl.detached.verify(Buffer.from(sha256.hex(ecBuffer),'hex'), Buffer.from(result['s'],'hex'), Buffer.from(result['k'],'hex'))) {\n       console.log(\"Transaction Signature is valid!!!\")\n    } else {\n       console.log(\"Transaction Signature is NOT valid!!!\")\n       throw(\"Invalid Identity Signature\")\n    }\n\n\n\n  //sign a sha512 of message using identity key\n  result = await fct.signMessageHash(path, ecBuffer, true)\n\n  if(nacl.detached.verify(Buffer.from(sha512.hex(ecBuffer),'hex'), Buffer.from(result['s'],'hex'), Buffer.from(result['k'],'hex'))) {\n     console.log(\"Transaction Signature is valid!!!\")\n  } else {\n     console.log(\"Transaction Signature is NOT valid!!!\")\n     throw(\"Invalid Identity Signature\")\n  }\n\n\n  return result\n}\n"]}