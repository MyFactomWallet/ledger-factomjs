{"version":3,"sources":["../src/testFat0Tx.js"],"names":["require","Transaction","FactomCli","nacl","sign","Entry","TransactionBuilder","testTokenChainId","transport","fct","Fct","amount","path","getAddress","addr","fromAddr","address","publicKey","Buffer","from","toAddr","tx","input","output","build","console","log","_content","toString","getMarshalDataSig","signFatTransaction","extsig","txgood","pkSignature","validateSignatures","result"],"mappings":";;;;;;;;;;;;;;AAAA;;;;;;eACuBA,QAAS,wBAAT,C;IAAfC,W,YAAAA,W;;gBACcD,QAAQ,uBAAR,C;IAAdE,S,aAAAA,S;;AACR,IAAMC,OAAOH,QAAQ,qBAAR,EAA+BI,IAA5C;;AAEA,IAAMC,QAAQL,QAAQ,kBAAR,EAA4BK,KAA1C;;AAEA,IAAMC,qBAAqBN,QAAQ,wCAAR,CAA3B;;AAEA,IAAMO,mBAAmB,kEAAzB;;;sFAEe,iBAAMC,SAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AACPC,eADO,GACD,IAAIC,kBAAJ,CAAQF,SAAR,CADC;AAEPG,kBAFO,GAEE,GAFF;AAGPC,gBAHO,GAGA,iBAHA;AAAA;AAAA,mBAIMH,IAAII,UAAJ,CAAeD,IAAf,CAJN;;AAAA;AAIPE,gBAJO;AAKPC,oBALO,GAKID,KAAKE,OALT;AAMPC,qBANO,GAMKC,OAAOC,IAAP,CAAYL,KAAKG,SAAjB,EAA2B,KAA3B,CANL;AAQPG,kBARO,GAQE,sDARF;AAUTC,cAVS,GAUJ,IAAIf,kBAAJ,CAAuBC,gBAAvB,EACNe,KADM,CACAP,QADA,EACUJ,MADV,EAENY,MAFM,CAECH,MAFD,EAEST,MAFT,EAGNa,KAHM,EAVI;;;AAeXC,oBAAQC,GAAR,CAAYL,GAAGM,QAAf;AACAF,oBAAQC,GAAR,CAAY,qBAAZ;AACAD,oBAAQC,GAAR,CAAYR,OAAOC,IAAP,CAAYE,GAAGM,QAAf,EAAyBC,QAAzB,CAAkC,KAAlC,CAAZ;AACAH,oBAAQC,GAAR,CAAY,yBAAZ;AACAD,oBAAQC,GAAR,CAAYL,GAAGQ,iBAAH,CAAqB,CAArB,EAAwBD,QAAxB,CAAiC,KAAjC,CAAZ;AACAH,oBAAQC,GAAR,CAAY,uBAAZ;AApBW;AAAA,mBAqBMjB,IAAIqB,kBAAJ,CAAuBlB,IAAvB,EAA6B,CAA7B,EAAgCS,GAAGQ,iBAAH,CAAqB,CAArB,EAAwBD,QAAxB,CAAiC,KAAjC,CAAhC,CArBN;;AAAA;AAqBTG,kBArBS;AAuBTC,kBAvBS,GAuBA,IAAI1B,kBAAJ,CAAuBe,EAAvB,EACVY,WADU,CACEhB,SADF,EACaC,OAAOC,IAAP,CAAYY,OAAO,GAAP,CAAZ,EAAwB,KAAxB,CADb,EAEVP,KAFU,EAvBA;;;AA2BbQ,mBAAOE,kBAAP;;AAEAT,oBAAQC,GAAR,CAAYM,MAAZ;;AA7Ba,6CA+BNG,MA/BM;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","file":"testFat0Tx.js","sourcesContent":["import Fct from '@factoid.org/hw-app-fct'\nconst { Transaction} = require( 'factom/src/transaction' )\nconst { FactomCli } = require('factom/src/factom-cli')\nconst nacl = require('tweetnacl/nacl-fast').sign\n\nconst Entry = require('factom/src/entry').Entry;\n\nconst TransactionBuilder = require('@fat-token/fat-js/0/TransactionBuilder')\n\nconst testTokenChainId = '888888d027c59579fc47a6fc6c4a5c0409c7c39bc38a86cb5fc0069978493762'\n\nexport default async transport => {\n  const fct = new Fct(transport);\n  const amount = 150\n  const path = \"44'/131'/0'/0/0\"\n  const addr = await fct.getAddress(path)\n  const fromAddr = addr.address\n  const publicKey = Buffer.from(addr.publicKey,'hex')\n\n  const toAddr = 'FA3nr5r54AKBZ9SLABS3JyRoGcWMVMTkePW9MECKM8shMg2pMagn'\n\n  let tx = new TransactionBuilder(testTokenChainId)\n    .input(fromAddr, amount)\n    .output(toAddr, amount)\n    .build()\n\n    console.log(tx._content)\n    console.log(\"CONTENT TRANSACTION\")\n    console.log(Buffer.from(tx._content).toString('hex'))\n    console.log(\"BEGIN WHOLE TRANSACTION\")\n    console.log(tx.getMarshalDataSig(0).toString('hex'))\n    console.log(\"END WHOLE TRANSACTION\")\n  let extsig = await fct.signFatTransaction(path, 0, tx.getMarshalDataSig(0).toString('hex'))\n\n  let txgood = new TransactionBuilder(tx)\n    .pkSignature(publicKey, Buffer.from(extsig['s'],'hex') )\n    .build()\n\n  txgood.validateSignatures()\n\n  console.log(txgood)\n\n  return result\n}\n"]}