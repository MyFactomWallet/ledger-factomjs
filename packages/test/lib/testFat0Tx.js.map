{"version":3,"sources":["../src/testFat0Tx.js"],"names":["require","Transaction","FactomCli","nacl","sign","assert","fctUtil","Entry","TransactionBuilder","testTokenChainId","transport","fct","Fct","amount","path","getAddress","addr","fromAddr","address","publicKey","Buffer","from","console","log","toAddr","tx","input","output","build","_content","toString","getMarshalDataSig","signFatTransaction","extsig","txgood","pkSignature","signature","testhash","sha512","hash","isTrue","validateSignatures"],"mappings":";;;;;;;;;;;;;;AAAA;;;;;;eACuBA,QAAS,wBAAT,C;IAAfC,W,YAAAA,W;;gBACcD,QAAQ,uBAAR,C;IAAdE,S,aAAAA,S;;AACR,IAAMC,OAAOH,QAAQ,qBAAR,EAA+BI,IAA5C;AACA,IAAMC,SAASL,QAAQ,MAAR,EAAgBK,MAA/B;AACA,IAAMC,UAAUN,QAAQ,iBAAR,CAAhB;;AAEA,IAAMO,QAAQP,QAAQ,kBAAR,EAA4BO,KAA1C;;AAEA,IAAMC,qBAAqBR,QAAQ,wCAAR,CAA3B;;AAEA,IAAMS,mBAAmB,kEAAzB;;;sFAEe,iBAAMC,SAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AACPC,eADO,GACD,IAAIC,kBAAJ,CAAQF,SAAR,CADC;AAEPG,kBAFO,GAEE,GAFF;AAGPC,gBAHO,GAGA,iBAHA;AAAA;AAAA,mBAIMH,IAAII,UAAJ,CAAeD,IAAf,CAJN;;AAAA;AAIPE,gBAJO;AAKPC,oBALO,GAKID,KAAKE,OALT;AAMPC,qBANO,GAMKC,OAAOC,IAAP,CAAYL,KAAKG,SAAjB,EAA2B,KAA3B,CANL;;;AAQbG,oBAAQC,GAAR,CAAY,sBAAZ;AACAD,oBAAQC,GAAR,CAAYP,IAAZ;AACAM,oBAAQC,GAAR,CAAY,sBAAZ;AACMC,kBAXO,GAWE,sDAXF;AAaTC,cAbS,GAaJ,IAAIjB,kBAAJ,CAAuBC,gBAAvB,EACNiB,KADM,CACAT,QADA,EACUJ,MADV,EAENc,MAFM,CAECH,MAFD,EAESX,MAFT,EAGNe,KAHM,EAbI;;;AAkBbN,oBAAQC,GAAR,CAAYE,GAAGI,QAAf;AACAP,oBAAQC,GAAR,CAAY,qBAAZ;AACAD,oBAAQC,GAAR,CAAYH,OAAOC,IAAP,CAAYI,GAAGI,QAAf,EAAyBC,QAAzB,CAAkC,KAAlC,CAAZ;AACAR,oBAAQC,GAAR,CAAY,yBAAZ;AACAD,oBAAQC,GAAR,CAAYE,GAAGM,iBAAH,CAAqB,CAArB,EAAwBD,QAAxB,CAAiC,KAAjC,CAAZ;AACAR,oBAAQC,GAAR,CAAY,uBAAZ;AAvBa;AAAA,mBAwBMZ,IAAIqB,kBAAJ,CAAuBlB,IAAvB,EAA6B,CAA7B,EAAgCW,GAAGM,iBAAH,CAAqB,CAArB,CAAhC,CAxBN;;AAAA;AAwBTE,kBAxBS;AA0BTC,kBA1BS,GA0BA,IAAI1B,kBAAJ,CAAuBiB,EAAvB,EACVU,WADU,CACEF,OAAOd,SADT,EACoBC,OAAOC,IAAP,CAAYY,OAAOG,SAAnB,EAA6B,KAA7B,CADpB,EAEVR,KAFU,EA1BA;AA8BTS,oBA9BS,GA8BE/B,QAAQgC,MAAR,CAAeb,GAAGM,iBAAH,CAAqB,CAArB,CAAf,CA9BF;;AA+BbT,oBAAQC,GAAR,CAAY,MAAZ;AACAD,oBAAQC,GAAR,CAAYU,OAAOM,IAAnB;AACAjB,oBAAQC,GAAR,CAAYc,SAASP,QAAT,CAAkB,KAAlB,CAAZ;AACAzB,mBAAOmC,MAAP,CAAcN,OAAOO,kBAAP,EAAd;AACApC,mBAAOmC,MAAP,CAAcH,SAASP,QAAT,CAAkB,KAAlB,MAA6BG,OAAOM,IAAlD;;AAEAjB,oBAAQC,GAAR,CAAYW,MAAZ;;AArCa,6CAuCND,MAvCM;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","file":"testFat0Tx.js","sourcesContent":["import Fct from '@factoid.org/hw-app-fct'\nconst { Transaction} = require( 'factom/src/transaction' )\nconst { FactomCli } = require('factom/src/factom-cli')\nconst nacl = require('tweetnacl/nacl-fast').sign\nconst assert = require('chai').assert;\nconst fctUtil = require('factom/src/util');\n\nconst Entry = require('factom/src/entry').Entry;\n\nconst TransactionBuilder = require('@fat-token/fat-js/0/TransactionBuilder')\n\nconst testTokenChainId = '888888d027c59579fc47a6fc6c4a5c0409c7c39bc38a86cb5fc0069978493762'\n\nexport default async transport => {\n  const fct = new Fct(transport);\n  const amount = 150\n  const path = \"44'/131'/0'/0/0\"\n  const addr = await fct.getAddress(path)\n  const fromAddr = addr.address\n  const publicKey = Buffer.from(addr.publicKey,'hex')\n\n  console.log(\"== Ledger address ==\")\n  console.log(addr)\n  console.log(\"====================\")\n  const toAddr = 'FA3nr5r54AKBZ9SLABS3JyRoGcWMVMTkePW9MECKM8shMg2pMagn'\n\n  let tx = new TransactionBuilder(testTokenChainId)\n    .input(fromAddr, amount)\n    .output(toAddr, amount)\n    .build()\n\n  console.log(tx._content)\n  console.log(\"CONTENT TRANSACTION\")\n  console.log(Buffer.from(tx._content).toString('hex'))\n  console.log(\"BEGIN WHOLE TRANSACTION\")\n  console.log(tx.getMarshalDataSig(0).toString('hex'))\n  console.log(\"END WHOLE TRANSACTION\")\n  let extsig = await fct.signFatTransaction(path, 0, tx.getMarshalDataSig(0))\n\n  let txgood = new TransactionBuilder(tx)\n    .pkSignature(extsig.publicKey, Buffer.from(extsig.signature,'hex') )\n    .build()\n\n  let testhash = fctUtil.sha512(tx.getMarshalDataSig(0))\n  console.log(\"hash\")\n  console.log(extsig.hash)\n  console.log(testhash.toString('hex'))\n  assert.isTrue(txgood.validateSignatures())\n  assert.isTrue(testhash.toString('hex') === extsig.hash)\n\n  console.log(txgood)\n\n  return extsig\n}\n"]}