{"version":3,"sources":["../src/testFat0Tx.js"],"names":["require","Transaction","FactomCli","nacl","sign","Entry","TransactionBuilder","testTokenChainId","transport","fct","Fct","amount","path","getAddress","addr","publicKey","Buffer","from","toAddr","tx","input","output","build","signFatTransaction","getMarshalDataSig","toString","extsig","txgood","pkSignature","validateSignatures","console","log","result"],"mappings":";;;;;;;;;;;;;;AAAA;;;;;;eACuBA,QAAS,wBAAT,C;IAAfC,W,YAAAA,W;;gBACcD,QAAQ,uBAAR,C;IAAdE,S,aAAAA,S;;AACR,IAAMC,OAAOH,QAAQ,qBAAR,EAA+BI,IAA5C;;AAEA,IAAMC,QAAQL,QAAQ,kBAAR,EAA4BK,KAA1C;;AAEA,IAAMC,qBAAqBN,QAAQ,wCAAR,CAA3B;;AAEA,IAAMO,mBAAmB,kEAAzB;;;sFAEe,iBAAMC,SAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AACPC,eADO,GACD,IAAIC,kBAAJ,CAAQF,SAAR,CADC;AAEPG,kBAFO,GAEE,GAFF;AAGPC,gBAHO,GAGA,iBAHA;AAAA;AAAA,mBAIMH,IAAII,UAAJ,CAAeD,IAAf,CAJN;;AAAA;AAIPE,gBAJO;AAKPC,qBALO,GAKKC,OAAOC,IAAP,CAAYH,KAAKC,SAAjB,EAA2B,KAA3B,CALL;AAOPG,kBAPO,GAOE,sDAPF;AASTC,cATS,GASJ,IAAIb,kBAAJ,CAAuBC,gBAAvB,EACNa,KADM,CACAL,SADA,EACWJ,MADX,EAENU,MAFM,CAECH,MAFD,EAESP,MAFT,EAGNW,KAHM,EATI;AAAA;AAAA,mBAcMb,IAAIc,kBAAJ,CAAuBX,IAAvB,EAA6B,CAA7B,EAAgCO,GAAGK,iBAAH,CAAqB,CAArB,EAAwBC,QAAxB,CAAiC,KAAjC,CAAhC,CAdN;;AAAA;AAcTC,kBAdS;AAgBTC,kBAhBS,GAgBA,IAAIrB,kBAAJ,CAAuBa,EAAvB,EACVS,WADU,CACEb,SADF,EACaC,OAAOC,IAAP,CAAYS,OAAO,GAAP,CAAZ,EAAwB,KAAxB,CADb,EAEVJ,KAFU,EAhBA;;;AAoBbK,mBAAOE,kBAAP;;AAEAC,oBAAQC,GAAR,CAAYJ,MAAZ;;AAtBa,6CAwBNK,MAxBM;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","file":"testFat0Tx.js","sourcesContent":["import Fct from '@factoid.org/hw-app-fct'\nconst { Transaction} = require( 'factom/src/transaction' )\nconst { FactomCli } = require('factom/src/factom-cli')\nconst nacl = require('tweetnacl/nacl-fast').sign\n\nconst Entry = require('factom/src/entry').Entry;\n\nconst TransactionBuilder = require('@fat-token/fat-js/0/TransactionBuilder')\n\nconst testTokenChainId = '888888d027c59579fc47a6fc6c4a5c0409c7c39bc38a86cb5fc0069978493762'\n\nexport default async transport => {\n  const fct = new Fct(transport);\n  const amount = 150\n  const path = \"44'/131'/0'/0/0\"\n  const addr = await fct.getAddress(path)\n  const publicKey = Buffer.from(addr.publicKey,'hex')\n\n  const toAddr = 'FA3nr5r54AKBZ9SLABS3JyRoGcWMVMTkePW9MECKM8shMg2pMagn'\n\n  let tx = new TransactionBuilder(testTokenChainId)\n    .input(publicKey, amount)\n    .output(toAddr, amount)\n    .build()\n\n  let extsig = await fct.signFatTransaction(path, 0, tx.getMarshalDataSig(0).toString('hex'))\n\n  let txgood = new TransactionBuilder(tx)\n    .pkSignature(publicKey, Buffer.from(extsig['s'],'hex') )\n    .build()\n\n  txgood.validateSignatures()\n\n  console.log(txgood)\n\n  return result\n}\n"]}