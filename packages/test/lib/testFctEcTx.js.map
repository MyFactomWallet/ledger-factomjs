{"version":3,"sources":["../src/testFctEcTx.js"],"names":["require","Transaction","FactomCli","nacl","sign","cli","host","port","path","debugPath","protocol","rejectUnauthorized","retry","retries","factor","minTimeout","maxTimeout","transport","fct","Fct","amount","ecRate","getAddress","addr","fromAddr","toAddr","t","builder","input","output","build","console","log","marshalBinarySig","toString","signTransaction","result","ts","rcdSignature","Buffer","from","i","signatures","length","detached","verify","rcds","slice"],"mappings":";;;;;;;;;;;;;;AAAA;;;;;;eACuBA,QAAS,wBAAT,C;IAAfC,W,YAAAA,W;;gBACcD,QAAQ,uBAAR,C;IAAdE,S,aAAAA,S;;AACR,IAAMC,OAAOH,QAAQ,qBAAR,EAA+BI,IAA5C;;AAGA,IAAMC,MAAM,IAAIH,SAAJ,CAAc;AACd;AACAI,QAAM,WAFQ;AAGrB;AACAC,QAAM,IAJe;AAKrBC,QAAM,KALe,EAKR;AACbC,aAAW,QANU,EAMA;AACrBC,YAAU,OAPW,EAOF;AACnBC,sBAAoB,KARC,EAQM;AAC3BC,SAAO;AACEC,aAAS,CADX;AAEEC,YAAQ,CAFV;AAGEC,gBAAY,GAHd;AAIEC,gBAAY;AAJd,GATc,EAAd,CAAZ;;;sFAgBe,iBAAMC,SAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AACPC,eADO,GACD,IAAIC,kBAAJ,CAAQF,SAAR,CADC;AAEPG,kBAFO,GAEE,OAFF;AAGPC,kBAHO,GAGE,KAHF,EAGQ;;AACfb,gBAJO,GAIA,iBAJA;AAAA;AAAA,mBAKMU,IAAII,UAAJ,CAAed,IAAf,CALN;;AAAA;AAKPe,gBALO;AAMPC,oBANO,GAMID,KAAK,SAAL,CANJ;AAQPE,kBARO,GAQE,sDARF;;AAUb;;AACMC,aAXO,GAWHzB,YAAY0B,OAAZ,GACPC,KADO,CACDJ,QADC,EACSJ,MADT,EAEPS,MAFO,CAEAJ,MAFA,EAEQ,CAFR,EAGPK,KAHO,EAXG;;;AAiBbC,oBAAQC,GAAR,CAAY,sEAAZ;AACAD,oBAAQC,GAAR,CAAYN,EAAEO,gBAAF,CAAmBC,QAAnB,CAA4B,KAA5B,CAAZ;AACAH,oBAAQC,GAAR,CAAY,sEAAZ;;AAnBa;AAAA,mBAqBQd,IAAIiB,eAAJ,CAAoB3B,IAApB,EAA0BkB,EAAEO,gBAAF,CAAmBC,QAAnB,CAA4B,KAA5B,CAA1B,CArBR;;AAAA;AAqBPE,kBArBO;;;AAuBbL,oBAAQC,GAAR,CAAY,8DAAZ;AACAD,oBAAQC,GAAR,CAAYI,MAAZ;AACAL,oBAAQC,GAAR,CAAY,8DAAZ;;AAEMK,cA3BO,GA2BFpC,YAAY0B,OAAZ,CAAoBD,CAApB,EACRY,YADQ,CACKC,OAAOC,IAAP,CAAYJ,OAAO,GAAP,CAAZ,EAAwB,KAAxB,CADL,EACqCG,OAAOC,IAAP,CAAYJ,OAAO,GAAP,CAAZ,EAAwB,KAAxB,CADrC,EAERN,KAFQ,EA3BE;AAgCJW,aAhCI,GAgCA,CAhCA;;AAAA;AAAA,kBAgCGA,IAAIJ,GAAGK,UAAH,CAAcC,MAhCrB;AAAA;AAAA;AAAA;;AAAA,iBAiCRxC,KAAKyC,QAAL,CAAcC,MAAd,CAAqBR,GAAGJ,gBAAxB,EAA0CI,GAAGK,UAAH,CAAcD,CAAd,CAA1C,EAA4DF,OAAOC,IAAP,CAAYH,GAAGS,IAAH,CAAQL,CAAR,CAAZ,EAAwB,CAAxB,EAA2BM,KAA3B,CAAiC,CAAjC,CAA5D,CAjCQ;AAAA;AAAA;AAAA;;AAkCThB,oBAAQC,GAAR,CAAY,mCAAZ;AAlCS;AAAA;;AAAA;AAoCTD,oBAAQC,GAAR,CAAY,uCAAZ;AApCS,kBAqCH,+BArCG;;AAAA;AAgC6B,cAAES,CAhC/B;AAAA;AAAA;;AAAA;AAAA,6CAwCNL,MAxCM;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","file":"testFctEcTx.js","sourcesContent":["import Fct from '@factoid.org/hw-app-fct'\nconst { Transaction} = require( 'factom/src/transaction' )\nconst { FactomCli } = require('factom/src/factom-cli')\nconst nacl = require('tweetnacl/nacl-fast').sign\n\n\nconst cli = new FactomCli({\n            //host: 'courtesy-node.factom.com',\n            host: 'localhost',\n\t    //port: 443,\n\t    port: 8088,\n\t    path: '/v2', // Path to V2 API. Default to /v2\n\t    debugPath: '/debug', // Path to debug API. Default to /debug\n\t    protocol: 'https', // http or https. Default to http\n\t    rejectUnauthorized: false, // Set to false to allow connection to a node with a self-signed certificate\n\t    retry: {\n              retries: 4,\n              factor: 2,\n              minTimeout: 500,\n              maxTimeout: 2000\n            }})\n\nexport default async transport => {\n  const fct = new Fct(transport);\n  const amount = 1000000\n  const ecRate = 22000 //await cli.getEntryCreditRate()\n  const path = \"44'/131'/0'/0/0\"\n  const addr = await fct.getAddress(path)\n  const fromAddr = addr['address']\n\n  const toAddr = 'EC2BURNFCT2PEGNETooo1oooo1oooo1oooo1oooo1oooo19wthin'\n\n  //burn the ships...\n  const t = Transaction.builder()\n    .input(fromAddr, amount)\n    .output(toAddr, 0)\n    .build()\n\n\n  console.log('-------------========== TXN CONVERT TO EC ==========----------------')\n  console.log(t.marshalBinarySig.toString('hex'))\n  console.log('-------------========== TXN CONVERT TO EC ==========----------------')\n\n  const result = await fct.signTransaction(path, t.marshalBinarySig.toString('hex'));\n\n  console.log('-------------========== SIGNATURE ==========----------------')\n  console.log(result)\n  console.log('-------------========== SIGNATURE ==========----------------')\n\n  const ts = Transaction.builder(t)\n    .rcdSignature(Buffer.from(result['r'],'hex'), Buffer.from(result['s'],'hex'))\n    .build()\n\n\n  for (let i = 0; i < ts.signatures.length; ++i) {\n    if(nacl.detached.verify(ts.marshalBinarySig, ts.signatures[i], Buffer.from(ts.rcds[i], 1).slice(1))) {\n      console.log(\"Transaction Signature is valid!!!\")\n    } else {\n      console.log(\"Transaction Signature is NOT valid!!!\")\n      throw(\"Invalid Transaction Signature\")\n    }\n  }\n  return result\n}\n"]}