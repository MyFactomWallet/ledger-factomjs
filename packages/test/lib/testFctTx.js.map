{"version":3,"sources":["../src/testFctTx.js"],"names":["require","Transaction","FactomCli","nacl","sign","cli","host","port","path","debugPath","user","password","protocol","rejectUnauthorized","retry","retries","factor","minTimeout","maxTimeout","transport","fct","Fct","amount","getEntryCreditRate","ecRate","getAddress","addr","fromAddr","toAddr","numinputs","numoutputs","fees","builder","input","output","build","computeRequiredFees","rcdSignatureLength","numberOfSignatures","console","log","t","marshalBinarySig","toString","signTransaction","result","ts","rcdSignature","Buffer","from","i","signatures","length","detached","verify","rcds","slice"],"mappings":";;;;;;;;;;;;;;AAAA;;;;;;eACuBA,QAAS,wBAAT,C;IAAfC,W,YAAAA,W;;gBACcD,QAAQ,uBAAR,C;IAAdE,S,aAAAA,S;;AACR,IAAMC,OAAOH,QAAQ,qBAAR,EAA+BI,IAA5C;;AAMA,IAAMC,MAAM,IAAIH,SAAJ,CAAc;AACdI,QAAM,0BADQ;AAErBC,QAAM,EAFe;AAGrBC,QAAM,KAHe,EAGR;AACbC,aAAW,QAJU,EAIA;AACrBC,QAAM,MALe,EAKP;AACdC,YAAU,KANW;AAOrBC,YAAU,MAPW,EAOH;AAClBC,sBAAoB,IARC,EAQK;AAC1BC,SAAO;AACEC,aAAS,CADX;AAEEC,YAAQ,CAFV;AAGEC,gBAAY,GAHd;AAIEC,gBAAY;AAJd,GATc,EAAd,CAAZ;;;sFAgBe,iBAAMC,SAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AACPC,eADO,GACD,IAAIC,kBAAJ,CAAQF,SAAR,CADC;AAEPG,kBAFO,GAEE,OAFF;AAAA;AAAA,mBAGQjB,IAAIkB,kBAAJ,EAHR;;AAAA;AAGPC,kBAHO;AAIPhB,gBAJO,GAIA,mBAJA;AAAA;AAAA,mBAKMY,IAAIK,UAAJ,CAAejB,IAAf,CALN;;AAAA;AAKPkB,gBALO;AAMPC,oBANO,GAMID,KAAK,SAAL,CANJ;AAQPE,kBARO,GAQE,sDARF;AAUPC,qBAVO,GAUK,CAVL;AAWPC,sBAXO,GAWM,EAXN;AAaPC,gBAbO,GAaA9B,YAAY+B,OAAZ,GACVC,KADU,CACJN,QADI,EACML,SAAOQ,UADb,EAEVI,MAFU,CAEHN,MAFG,EAEKN,MAFL,EAGVY,MAHU,CAGHN,MAHG,EAGKN,MAHL,EAIVY,MAJU,CAIHN,MAJG,EAIKN,MAJL,EAKVY,MALU,CAKHN,MALG,EAKKN,MALL,EAMVY,MANU,CAMHN,MANG,EAMKN,MANL,EAOVY,MAPU,CAOHN,MAPG,EAOKN,MAPL,EAQVY,MARU,CAQHN,MARG,EAQKN,MARL,EASVY,MATU,CASHN,MATG,EASKN,MATL,EAUVY,MAVU,CAUHN,MAVG,EAUKN,MAVL,EAWVa,KAXU,GAYVC,mBAZU,CAYUZ,MAZV,EAYkB,EAAEa,oBAAoBP,cAAc,KAAK,EAAnB,CAAtB,EAA8CQ,oBAAoBT,SAAlE,EAZlB,CAbA;;;AA2BbU,oBAAQC,GAAR,CAAY,gBAAZ;AACAD,oBAAQC,GAAR,CAAYhB,MAAZ;AACAe,oBAAQC,GAAR,CAAY,gBAAZ;AACAD,oBAAQC,GAAR,CAAY,gBAAZ;AACAD,oBAAQC,GAAR,CAAYT,IAAZ;AACAQ,oBAAQC,GAAR,CAAY,gBAAZ;;AAEMC,aAlCO,GAkCHxC,YAAY+B,OAAZ,GACPC,KADO,CACDN,QADC,EACSL,SAAOQ,UAAP,GAAkBC,IAD3B,EAEPG,MAFO,CAEAN,MAFA,EAEQN,MAFR,EAGPY,MAHO,CAGAN,MAHA,EAGQN,MAHR,EAIPY,MAJO,CAIAN,MAJA,EAIQN,MAJR,EAKPY,MALO,CAKAN,MALA,EAKQN,MALR,EAMPY,MANO,CAMAN,MANA,EAMQN,MANR,EAOPY,MAPO,CAOAN,MAPA,EAOQN,MAPR,EAQPY,MARO,CAQAN,MARA,EAQQN,MARR,EASPY,MATO,CASAN,MATA,EASQN,MATR,EAUPY,MAVO,CAUAN,MAVA,EAUQN,MAVR,EAWPa,KAXO,EAlCG;;;AAgDbI,oBAAQC,GAAR,CAAY,wDAAZ;AACAD,oBAAQC,GAAR,CAAYC,EAAEC,gBAAF,CAAmBC,QAAnB,CAA4B,KAA5B,CAAZ;AACAJ,oBAAQC,GAAR,CAAY,wDAAZ;;AAlDa;AAAA,mBAoDQpB,IAAIwB,eAAJ,CAAoB,mBAApB,EAAyCH,EAAEC,gBAAF,CAAmBC,QAAnB,CAA4B,KAA5B,CAAzC,CApDR;;AAAA;AAoDPE,kBApDO;;;AAsDbN,oBAAQC,GAAR,CAAY,8DAAZ;AACAD,oBAAQC,GAAR,CAAYK,MAAZ;AACAN,oBAAQC,GAAR,CAAY,8DAAZ;;AAEMM,cA1DO,GA0DF7C,YAAY+B,OAAZ,CAAoBS,CAApB,EACRM,YADQ,CACKC,OAAOC,IAAP,CAAYJ,OAAO,GAAP,CAAZ,EAAwB,KAAxB,CADL,EACqCG,OAAOC,IAAP,CAAYJ,OAAO,GAAP,CAAZ,EAAwB,KAAxB,CADrC,EAERV,KAFQ,EA1DE;;;AA+Db,iBAASe,CAAT,GAAa,CAAb,EAAgBA,IAAIJ,GAAGK,UAAH,CAAcC,MAAlC,EAA0C,EAAEF,CAA5C,EAA+C;AAC7C,kBAAG/C,KAAKkD,QAAL,CAAcC,MAAd,CAAqBR,GAAGJ,gBAAxB,EAA0CI,GAAGK,UAAH,CAAcD,CAAd,CAA1C,EAA4DF,OAAOC,IAAP,CAAYH,GAAGS,IAAH,CAAQL,CAAR,CAAZ,EAAwB,CAAxB,EAA2BM,KAA3B,CAAiC,CAAjC,CAA5D,CAAH,EAAqG;AACnGjB,wBAAQC,GAAR,CAAY,sBAAZ;AACD,eAFD,MAEO;AACLD,wBAAQC,GAAR,CAAY,yBAAZ;AACD;AACF;AArEY,6CAsENK,MAtEM;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","file":"testFctTx.js","sourcesContent":["import Fct from '@ledgerhq/hw-app-fct'\nconst { Transaction} = require( 'factom/src/transaction' )\nconst { FactomCli } = require('factom/src/factom-cli')\nconst nacl = require('tweetnacl/nacl-fast').sign\n\n\n\n\n            \nconst cli = new FactomCli({\n            host: 'courtesy-node.factom.com',\n\t    port: 80,\n\t    path: '/v2', // Path to V2 API. Default to /v2\n\t    debugPath: '/debug', // Path to debug API. Default to /debug\n\t    user: 'paul', // RPC basic authentication\n\t    password: 'pwd',\n\t    protocol: 'http', // http or https. Default to http\n\t    rejectUnauthorized: true, // Set to false to allow connection to a node with a self-signed certificate\n\t    retry: {\n              retries: 4,\n              factor: 2,\n              minTimeout: 500,\n              maxTimeout: 2000\n            }})\n\nexport default async transport => {\n  const fct = new Fct(transport);\n  const amount = 1000000\n  const ecRate = await cli.getEntryCreditRate()\n  const path = \"44'/131'/0'/0'/0'\"\n  const addr = await fct.getAddress(path)\n  const fromAddr = addr['address']\n\n  const toAddr = 'FA3nr5r54AKBZ9SLABS3JyRoGcWMVMTkePW9MECKM8shMg2pMagn'\n\n  const numinputs = 1\n  const numoutputs = 10\n\n  const fees = Transaction.builder()\n    .input(fromAddr, amount*numoutputs)\n    .output(toAddr, amount)\n    .output(toAddr, amount)\n    .output(toAddr, amount)\n    .output(toAddr, amount)\n    .output(toAddr, amount)\n    .output(toAddr, amount)\n    .output(toAddr, amount)\n    .output(toAddr, amount)\n    .output(toAddr, amount)\n    .build()\n    .computeRequiredFees(ecRate, { rcdSignatureLength: numoutputs * (33 + 64), numberOfSignatures: numinputs })\n\n  console.log(\"*** ecRate ***\")\n  console.log(ecRate)\n  console.log(\"**************\")\n  console.log(\"***  fees  ***\")\n  console.log(fees)\n  console.log(\"**************\")\n\n  const t = Transaction.builder()\n    .input(fromAddr, amount*numoutputs+fees)\n    .output(toAddr, amount)\n    .output(toAddr, amount)\n    .output(toAddr, amount)\n    .output(toAddr, amount)\n    .output(toAddr, amount)\n    .output(toAddr, amount)\n    .output(toAddr, amount)\n    .output(toAddr, amount)\n    .output(toAddr, amount)\n    .build()\n\n\n  console.log('-------------========== TXN ==========----------------')\n  console.log(t.marshalBinarySig.toString('hex'))\n  console.log('-------------========== TXN ==========----------------')\n\n  const result = await fct.signTransaction(\"44'/131'/0'/0'/0'\", t.marshalBinarySig.toString('hex'));\n\n  console.log('-------------========== SIGNATURE ==========----------------')\n  console.log(result)\n  console.log('-------------========== SIGNATURE ==========----------------')\n\n  const ts = Transaction.builder(t)\n    .rcdSignature(Buffer.from(result['r'],'hex'), Buffer.from(result['s'],'hex'))\n    .build()\n\n\n  for (let i = 0; i < ts.signatures.length; ++i) {\n    if(nacl.detached.verify(ts.marshalBinarySig, ts.signatures[i], Buffer.from(ts.rcds[i], 1).slice(1))) {\n      console.log(\"SIGNATURE IS VALID!!\")\n    } else {\n      console.log(\"SIGNATURE IS NOT VALID!\")\n    }\n  }\n  return result\n}\n"]}