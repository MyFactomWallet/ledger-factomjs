{"version":3,"sources":["../src/index-node-id.js"],"names":["snapshotMode","TransportHid","recordStore","RecordStore","step","name","records","Error","then","console","log","snapshots","toObject","fs","writeFileSync","error","e","process","exit","main","argv"],"mappings":";;;;;;;;;;;;;;;sFAgBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAOQ,yBAAS,gBAAQ;AACrB,kBAAI,CAACA,YAAL,EAAmB,OAAOC,4BAAP;AACnB,kBAAMC,cAAc,IAAIC,8BAAJ,EAApB;AACA,kBAAIC,KAAKC,IAAL,IAAaC,OAAjB,EAA0B;AACxB,sBAAM,IAAIC,KAAJ,CAAU,kBAAkBH,KAAKC,IAAvB,GAA8B,mBAAxC,CAAN;AACD;AACDC,sBAAQF,KAAKC,IAAb,IAAqBH,WAArB;AACA,qBAAO,gDAAwBD,4BAAxB,EAAsCC,WAAtC,CAAP;AACD,aARK,EAQHM,IARG,CASJ,YAAM;AACJC,sBAAQC,GAAR,CAAY,UAAZ;AACA,kBAAIV,YAAJ,EAAkB;AAChBS,wBAAQC,GAAR,CAAY,wBAAZ;AACA,oBAAMC,YAAY,EAAlB;AACA,qBAAK,IAAIN,IAAT,IAAiBC,OAAjB,EAA0B;AACxBK,4BAAUN,IAAV,IAAkBC,QAAQD,IAAR,EAAcO,QAAd,EAAlB;AACD;AACDC,6BAAGC,aAAH,CACE,oCADF,EAEE,yBAAeH,SAAf,EAA0B,IAA1B,EAAgC,CAAhC,CAFF;AAIAF,wBAAQC,GAAR,CAAY,OAAZ;AACD;AACF,aAvBG,EAwBJ,aAAK;AACHD,sBAAQM,KAAR,CAAcC,CAAd;AACAC,sBAAQC,IAAR,CAAa,CAAb;AACD,aA3BG,CAPR;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;kBAAeC,I;;;;;AAhBf;;AAEA;;;;AACA;;;;AACA;;AAIA;;;;AAEA;;;;;;AAEA,IAAMnB,eAAeiB,QAAQG,IAAR,CAAa,CAAb,MAAoB,UAAzC;AAHA;;;AAKA,IAAMd,UAAU,EAAhB;;AAwCAa","file":"index-node-id.js","sourcesContent":["import \"babel-polyfill\";\n\nimport fs from \"fs\";\nimport TransportHid from \"@ledgerhq/hw-transport-node-hid\";\nimport {\n  createTransportRecorder,\n  RecordStore\n} from \"@ledgerhq/hw-transport-mocker\";\nimport getSnapshotJSONFile from \"./getSnapshotJSONFile\";\n//import ensureBtcSnapshotAccount from \"./ensureBtcSnapshotAccount\";\nimport runTests from \"./runIdTest\";\n\nconst snapshotMode = process.argv[2] === \"snapshot\";\n\nconst records = {};\n\nasync function main() {\n//  if (snapshotMode) {\n//    const t = await TransportHid.create();\n//    ensureBtcSnapshotAccount(t);\n//    await t.close();\n//  }\n\n  await runTests(step => {\n    if (!snapshotMode) return TransportHid;\n    const recordStore = new RecordStore();\n    if (step.name in records) {\n      throw new Error(\"Test called '\" + step.name + \"' already exists.\");\n    }\n    records[step.name] = recordStore;\n    return createTransportRecorder(TransportHid, recordStore);\n  }).then(\n    () => {\n      console.log(\"ALL PASS\");\n      if (snapshotMode) {\n        console.log(\"recording snapshots...\");\n        const snapshots = {};\n        for (let name in records) {\n          snapshots[name] = records[name].toObject();\n        }\n        fs.writeFileSync(\n          getSnapshotJSONFile(),\n          JSON.stringify(snapshots, null, 2)\n        );\n        console.log(\"done.\");\n      }\n    },\n    e => {\n      console.error(e);\n      process.exit(1);\n    }\n  );\n}\n\nmain();\n"]}