{"version":3,"sources":["../src/testFat1Tx.js"],"names":["require","Transaction","FactomCli","nacl","sign","assert","fctUtil","Entry","TransactionBuilder","testTokenChainId","transport","fct","Fct","amount","path","getAddress","addr","fromAddr","address","publicKey","Buffer","from","toAddr","meta","type","timestamp","Date","getTime","tx","input","output","metadata","build","console","log","_content","toString","getMarshalDataSig","signFatTransaction","extsig","txgood","pkSignature","signature","testhash","sha512","hash","isTrue","validateSignatures"],"mappings":";;;;;;;;;;;;;;AAAA;;;;;;eACuBA,QAAS,wBAAT,C;IAAfC,W,YAAAA,W;;gBACcD,QAAQ,uBAAR,C;IAAdE,S,aAAAA,S;;AACR,IAAMC,OAAOH,QAAQ,qBAAR,EAA+BI,IAA5C;AACA,IAAMC,SAASL,QAAQ,MAAR,EAAgBK,MAA/B;AACA,IAAMC,UAAUN,QAAQ,iBAAR,CAAhB;;AAEA,IAAMO,QAAQP,QAAQ,kBAAR,EAA4BO,KAA1C;;AAEA,IAAMC,qBAAqBR,QAAQ,wCAAR,CAA3B;;AAEA,IAAMS,mBAAmB,kEAAzB;;;sFAEe,iBAAMC,SAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AACPC,eADO,GACD,IAAIC,kBAAJ,CAAQF,SAAR,CADC;AAEPG,kBAFO,GAEE,GAFF;AAGPC,gBAHO,GAGA,iBAHA;AAAA;AAAA,mBAIMH,IAAII,UAAJ,CAAeD,IAAf,CAJN;;AAAA;AAIPE,gBAJO;AAKPC,oBALO,GAKID,KAAKE,OALT;AAMPC,qBANO,GAMKC,OAAOC,IAAP,CAAYL,KAAKG,SAAjB,EAA2B,KAA3B,CANL;AAQPG,kBARO,GAQE,sDARF;;AAUb;;AACMC,gBAXO,GAWA,EAACC,MAAM,iBAAP,EAA0BC,WAAW,IAAIC,IAAJ,GAAWC,OAAX,EAArC,EAXA;AAaTC,cAbS,GAaJ,IAAIpB,kBAAJ,CAAuBC,gBAAvB,EACEoB,KADF,CACQZ,QADR,EACkB,CAAC,EAAD,CADlB,EAEEa,MAFF,CAESR,MAFT,EAEiB,CAAC,EAAD,CAFjB,EAGES,QAHF,CAGWR,IAHX,EAIES,KAJF,EAbI;;;AAoBbC,oBAAQC,GAAR,CAAYN,GAAGO,QAAf;AACAF,oBAAQC,GAAR,CAAY,qBAAZ;AACAD,oBAAQC,GAAR,CAAYd,OAAOC,IAAP,CAAYO,GAAGO,QAAf,EAAyBC,QAAzB,CAAkC,KAAlC,CAAZ;AACAH,oBAAQC,GAAR,CAAY,yBAAZ;AACAD,oBAAQC,GAAR,CAAYN,GAAGS,iBAAH,CAAqB,CAArB,EAAwBD,QAAxB,CAAiC,KAAjC,CAAZ;AACAH,oBAAQC,GAAR,CAAY,uBAAZ;AAzBa;AAAA,mBA0BMvB,IAAI2B,kBAAJ,CAAuBxB,IAAvB,EAA6B,CAA7B,EAAgCc,GAAGS,iBAAH,CAAqB,CAArB,CAAhC,CA1BN;;AAAA;AA0BTE,kBA1BS;AA4BTC,kBA5BS,GA4BA,IAAIhC,kBAAJ,CAAuBoB,EAAvB,EACVa,WADU,CACEF,OAAOpB,SADT,EACoBC,OAAOC,IAAP,CAAYkB,OAAOG,SAAnB,EAA6B,KAA7B,CADpB,EAEVV,KAFU,EA5BA;AAgCTW,oBAhCS,GAgCErC,QAAQsC,MAAR,CAAehB,GAAGS,iBAAH,CAAqB,CAArB,CAAf,CAhCF;;AAiCbJ,oBAAQC,GAAR,CAAY,MAAZ;AACAD,oBAAQC,GAAR,CAAYK,OAAOM,IAAnB;AACAZ,oBAAQC,GAAR,CAAYS,SAASP,QAAT,CAAkB,KAAlB,CAAZ;AACA/B,mBAAOyC,MAAP,CAAcN,OAAOO,kBAAP,EAAd;AACA1C,mBAAOyC,MAAP,CAAcH,SAASP,QAAT,CAAkB,KAAlB,MAA6BG,OAAOM,IAAlD;;AAEAZ,oBAAQC,GAAR,CAAYM,MAAZ;;AAvCa,6CAyCND,MAzCM;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","file":"testFat1Tx.js","sourcesContent":["import Fct from '@factoid.org/hw-app-fct'\nconst { Transaction} = require( 'factom/src/transaction' )\nconst { FactomCli } = require('factom/src/factom-cli')\nconst nacl = require('tweetnacl/nacl-fast').sign\nconst assert = require('chai').assert;\nconst fctUtil = require('factom/src/util');\n\nconst Entry = require('factom/src/entry').Entry;\n\nconst TransactionBuilder = require('@fat-token/fat-js/1/TransactionBuilder')\n\nconst testTokenChainId = '888888d027c59579fc47a6fc6c4a5c0409c7c39bc38a86cb5fc0069978493762'\n\nexport default async transport => {\n  const fct = new Fct(transport);\n  const amount = 150\n  const path = \"44'/131'/0'/0/0\"\n  const addr = await fct.getAddress(path)\n  const fromAddr = addr.address\n  const publicKey = Buffer.from(addr.publicKey,'hex')\n\n  const toAddr = 'FA3nr5r54AKBZ9SLABS3JyRoGcWMVMTkePW9MECKM8shMg2pMagn'\n\n  //test metadata\n  const meta = {type: 'fat-js test run', timestamp: new Date().getTime()};\n\n  let tx = new TransactionBuilder(testTokenChainId)\n            .input(fromAddr, [10])\n            .output(toAddr, [10])\n            .metadata(meta)\n            .build();\n\n\n  console.log(tx._content)\n  console.log(\"CONTENT TRANSACTION\")\n  console.log(Buffer.from(tx._content).toString('hex'))\n  console.log(\"BEGIN WHOLE TRANSACTION\")\n  console.log(tx.getMarshalDataSig(0).toString('hex'))\n  console.log(\"END WHOLE TRANSACTION\")\n  let extsig = await fct.signFatTransaction(path, 1, tx.getMarshalDataSig(0))\n\n  let txgood = new TransactionBuilder(tx)\n    .pkSignature(extsig.publicKey, Buffer.from(extsig.signature,'hex') )\n    .build()\n\n  let testhash = fctUtil.sha512(tx.getMarshalDataSig(0))\n  console.log(\"hash\")\n  console.log(extsig.hash)\n  console.log(testhash.toString('hex'))\n  assert.isTrue(txgood.validateSignatures())\n  assert.isTrue(testhash.toString('hex') === extsig.hash)\n\n  console.log(txgood)\n\n  return extsig\n}\n"]}