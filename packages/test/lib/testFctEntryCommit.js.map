{"version":3,"sources":["../src/testFctEntryCommit.js"],"names":["require","Entry","validateEntryInstance","composeEntryReveal","FactomCli","nacl","sign","cli","host","port","path","debugPath","user","password","protocol","rejectUnauthorized","retry","retries","factor","minTimeout","maxTimeout","composeEntryLedger","entry","buffer","Buffer","alloc","writeInt8","writeIntBE","timestamp","Date","now","hash","copy","ecCost","composeEntryCommit","ecPublic","signature","concat","composeEntry","ecpubkey","commit","reveal","transport","fct","Fct","getEntryCreditRate","ecRate","getAddress","addr","fromAddr","builder","chainId","content","build","ecbuffer","console","log","toString","signCommit","result","out","from"],"mappings":"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","file":"testFctEntryCommit.js","sourcesContent":["import Fct from '@ledgerhq/hw-app-fct'\nconst { Entry, validateEntryInstance, composeEntryReveal } = require( 'factom/src/entry' )\nconst { FactomCli } = require('factom/src/factom-cli')\nconst nacl = require('tweetnacl/nacl-fast').sign\n\nconst cli = new FactomCli({\n            host: 'courtesy-node.factom.com',\n\t    port: 80,\n\t    path: '/v2', // Path to V2 API. Default to /v2\n\t    debugPath: '/debug', // Path to debug API. Default to /debug\n\t    user: 'paul', // RPC basic authentication\n\t    password: 'pwd',\n\t    protocol: 'http', // http or https. Default to http\n\t    rejectUnauthorized: true, // Set to false to allow connection to a node with a self-signed certificate\n\t    retry: {\n              retries: 4,\n              factor: 2,\n              minTimeout: 500,\n              maxTimeout: 2000\n            }})\n\nfunction composeEntryLedger(entry) {\n    const buffer = Buffer.alloc(40);\n\n    buffer.writeInt8(0);\n    buffer.writeIntBE(entry.timestamp || Date.now(), 1, 6);\n    entry.hash().copy(buffer, 7);\n    buffer.writeInt8(entry.ecCost(), 39);\n\n    return buffer;\n}\n\nfunction composeEntryCommit(entry, ecPublic, signature) {\n    validateEntryInstance(entry);\n    const buffer = composeEntryLedger(entry);\n    return Buffer.concat([buffer, ecPublic, signature]);\n}\n\nfunction composeEntry(entry, ecpubkey, signature) {\n    validateEntryInstance(entry);\n\n    return {\n        commit: composeEntryCommit(entry, ecpubkey, signature),\n        reveal: composeEntryReveal(entry)\n    };\n}\n\n\n\nexport default async transport => {\n  const fct = new Fct(transport);\n  const ecRate = await cli.getEntryCreditRate()\n  const path = \"44'/132'/0'/0'/0'\"\n  const addr = await fct.getAddress(path)\n  const fromAddr = addr['address']\n\n  const entry = Entry.builder()\n    .chainId('954d5a49fd70d9b8bcdb35d252267829957f7ef7fa6c74f88419bdc5e82209f4')\n    .content('Hello Ledger')\n    .build();\n\n  const ecbuffer = composeEntryLedger(entry)\n\n  console.log('-------------========== Entry Commit Begin ==========----------------')\n  console.log(ecbuffer.toString('hex'))\n  console.log('-------------========== Entry Commit End ==========----------------')\n\n  const result = await fct.signCommit(path, ecbuffer.toString('hex'),false);\n\n  console.log('-------------========== SIGNATURE ==========----------------')\n  console.log(result)\n  console.log('-------------========== SIGNATURE ==========----------------')\n\n  const out = composeEntry(entry, Buffer.from(result['k'],'hex'), Buffer.from(result['s'],'hex'))\n  console.log('-------------========== Composed Entry Begin ==========----------------')\n  console.log('commit:')\n  console.log(out['commit'].toString('hex'))\n  console.log('reveal:')\n  console.log(out['reveal'].toString('hex'))\n  console.log('-------------========== Compose Entry End ==========----------------')\n\n  return out\n}\n"]}