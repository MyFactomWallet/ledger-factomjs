{"version":3,"sources":["../src/runTests.js"],"names":["expectAppContext","appName","tests","name","run","testFctECAddr","testFctAddr","testFctTx","testFctEntryCommit","testFctChainCommit","testFctAppConfig","defaultWaitForAppSwitch","s","console","info","step","interval","setInterval","log","clearInterval","resolve","getTransportClass","timeout","Transport","list","descriptors","length","open","createTransportViaList","success","failure","t","subscription","listen","next","e","type","unsubscribe","descriptor","clearTimeout","error","complete","setTimeout","createTransportViaListen","create","createTransportViaCreate","waitForAppSwitch","reduce","p","i","isSupported","supported","Error","createTransport","transport","setDebugMode","result","close"],"mappings":"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","file":"runTests.js","sourcesContent":["import testFctAppConfig from \"./testFctAddr\";\nimport testFctAddr from \"./testFctAddr\";\nimport testFctTx from \"./testFctTx\";\nimport testFctECAddr from \"./testFctECAddr\";\nimport testFctEntryCommit from \"./testFctEntryCommit\";\nimport testFctChainCommit from \"./testFctChainCommit\";\n\nfunction expectAppContext(appName) {\n  // TODO improve this by waiting user to do an action?\n  return {\n    expectAppContext: true,\n    appName\n  };\n}\n\nvar tests = [\n  expectAppContext(\"Factom (fct)\"),\n  { name: \"testFctECAddr\", run: testFctECAddr },\n  { name: \"testFctAddr\", run: testFctAddr },\n  { name: \"testFctTx\", run: testFctTx },\n  { name: \"testFctEntryCommit\", run: testFctEntryCommit },\n  { name: \"testFctChainCommit\", run: testFctChainCommit },\n  { name: \"testFctAppConfig\", run: testFctAppConfig },\n];\n\nconst defaultWaitForAppSwitch = step =>\n  new Promise(resolve => {\n    var s = 3;\n    console.info(\n      \"You have \" + s + \" seconds to switch to \" + step.appName + \" app ...\"\n    );\n    var interval = setInterval(() => {\n      if (--s) {\n        console.log(s + \" ...\");\n      } else {\n        clearInterval(interval);\n        resolve();\n      }\n    }, 1000);\n  });\n\nexport default async (\n  getTransportClass,\n  timeout = 5000,\n  waitForAppSwitch = defaultWaitForAppSwitch\n) => {\n  async function createTransportViaList(Transport) {\n    const descriptors = await Transport.list();\n    if (descriptors.length === 0) throw \"No device found\";\n    return await Transport.open(descriptors[0], timeout);\n  }\n  async function createTransportViaListen(Transport) {\n    const descriptor = await new Promise((success, failure) => {\n      let t;\n      const subscription = Transport.listen({\n        next: e => {\n          if (e.type === \"add\") {\n            subscription.unsubscribe();\n            success(e.descriptor);\n            clearTimeout(t);\n          }\n        },\n        error: error => {\n          failure(error);\n          clearTimeout(t);\n        },\n        complete: () => {\n          failure(\"terminated too early\");\n          clearTimeout(t);\n        }\n      });\n      t = setTimeout(() => {\n        subscription.unsubscribe();\n        failure(\"timeout\");\n      }, timeout);\n    });\n    return await Transport.open(descriptor, timeout);\n  }\n  async function createTransportViaCreate(Transport) {\n    return await Transport.create(timeout);\n  }\n\n  return tests.reduce(async (p, step, i) => {\n    await p;\n    if (step.expectAppContext) {\n      await waitForAppSwitch(step);\n      return;\n    }\n    const Transport = getTransportClass(step);\n    const supported = await Transport.isSupported();\n    if (!supported) {\n      throw new Error(\"Transport.isSupported() is false\");\n    }\n    // this will alternate between one of the 3 ways to create a transport\n    const createTransport = [\n      createTransportViaCreate,\n      createTransportViaList,\n      createTransportViaListen\n    ][i % 3];\n    let transport = await createTransport(Transport);\n    transport.setDebugMode(true);\n\n    if (step.name) {\n      console.info(\"Running test \" + step.name);\n    }\n    try {\n      const result = await step.run(transport);\n      if (result) {\n        console.log(result);\n      }\n    } catch (err) {\n      console.error(\"Failed test \" + step.name + \":\", err);\n      throw err;\n    } finally {\n      transport.close();\n    }\n  }, Promise.resolve());\n};\n"]}