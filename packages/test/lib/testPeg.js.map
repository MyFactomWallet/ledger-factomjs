{"version":3,"sources":["../src/testPeg.js"],"names":["require","Transaction","FactomCli","nacl","sign","assert","fctUtil","Entry","TransactionBuilder","pegtransfer","Buffer","from","pegconversion","transport","fct","Fct","amount","path","getAddress","addr","fromAddr","address","publicKey","console","log","toString","toAddr","signFatTransaction","extsig","testhash","sha512","hash","isTrue","detached","verify","signature"],"mappings":"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","file":"testPeg.js","sourcesContent":["import Fct from '@factoid.org/hw-app-fct'\nconst { Transaction} = require( 'factom/src/transaction' )\nconst { FactomCli } = require('factom/src/factom-cli')\nconst nacl = require('tweetnacl/nacl-fast').sign\nconst assert = require('chai').assert;\nconst fctUtil = require('factom/src/util');\n\nconst Entry = require('factom/src/entry').Entry;\n\nconst TransactionBuilder = require('@fat-token/fat-js/0/TransactionBuilder')\n\nlet pegtransfer = Buffer.from(\n\"3031353838323736383434cffce0f409ebba4ed236d49d89c70e4bd1f1367d86402a3363366683265a242d7b2276657273696f6e223a312c227472616e73616374696f6e73223a5b7b22696e707574223a7b2261646472657373223a22464132326465354e534732464132486d4d61443468387153415a414a797a746d6d6e77674c50676843514b6f53656b7759596374222c22616d6f756e74223a3135302c2274797065223a2270464354227d2c227472616e7366657273223a5b7b2261646472657373223a2246413361454370773367455a37434d5176524e7845744b42474b416f73333932326f71594c634851394e7158487564433659424d222c22616d6f756e74223a3135307d5d7d5d7d\",'hex')\nlet pegconversion = Buffer.from( \"3031353838323833343935cffce0f409ebba4ed236d49d89c70e4bd1f1367d86402a3363366683265a242d7b2276657273696f6e223a312c227472616e73616374696f6e73223a5b7b22696e707574223a7b2261646472657373223a22464132326465354e534732464132486d4d61443468387153415a414a797a746d6d6e77674c50676843514b6f53656b7759596374222c22616d6f756e74223a3135302c2274797065223a2270464354227d2c22636f6e76657273696f6e223a22504547227d5d7d\",'hex')\n\nexport default async transport => {\n  const fct = new Fct(transport);\n  const amount = 150\n  const path = \"44'/131'/0'/0/0\"\n  const addr = await fct.getAddress(path)\n  const fromAddr = addr.address\n  const publicKey = Buffer.from(addr.publicKey,'hex')\n  \n  console.log(\"=============ADDRESS==============\");\n  console.log(addr.address)\n  console.log(\"==================================\");\n  \n  console.log(pegtransfer.toString());\n  \n  const toAddr = 'FA3nr5r54AKBZ9SLABS3JyRoGcWMVMTkePW9MECKM8shMg2pMagn'\n/*\n  let tx = new TransactionBuilder(testTokenChainId)\n    .input(fromAddr, amount)\n    .output(toAddr, amount)\n    .build()\n\n  console.log(tx._content)\n  console.log(\"CONTENT TRANSACTION\")\n  console.log(Buffer.from(tx._content).toString('hex'))\n  console.log(\"BEGIN WHOLE TRANSACTION\")\n  console.log(tx.getMarshalDataSig(0).toString('hex'))\n  console.log(\"END WHOLE TRANSACTION\")\n  */\n  let extsig = await fct.signFatTransaction(path, 2, pegtransfer)//tx.getMarshalDataSig(0))\n\n  //let txgood = new TransactionBuilder(tx)\n  //  .pkSignature(extsig.publicKey, Buffer.from(extsig.signature,'hex') )\n  //  .build()\n\n  let testhash = fctUtil.sha512(pegtransfer);//tx.getMarshalDataSig(0))\n  console.log(\"hash\")\n  console.log(extsig.hash)\n  console.log(testhash.toString('hex'))\n  console.log(publicKey)\n  \n  assert.isTrue(nacl.detached.verify(Buffer.from(extsig.hash,'hex'), Buffer.from(extsig.signature,'hex'), publicKey)) \n  assert.isTrue(testhash.toString('hex') === extsig.hash)\n\n  //console.log(txgood)\n  \n  extsig = await fct.signFatTransaction(path, 2, pegconversion)//tx.getMarshalDataSig(0))\n\n  //let txgood = new TransactionBuilder(tx)\n  //  .pkSignature(extsig.publicKey, Buffer.from(extsig.signature,'hex') )\n  //  .build()\n\n  testhash = fctUtil.sha512(pegconversion);//tx.getMarshalDataSig(0))\n  console.log(\"hash\")\n  console.log(extsig.hash)\n  console.log(testhash.toString('hex'))\n  console.log(publicKey)\n  \n  assert.isTrue(nacl.detached.verify(Buffer.from(extsig.hash,'hex'), Buffer.from(extsig.signature,'hex'), publicKey))\n  assert.isTrue(testhash.toString('hex') === extsig.hash)\n  \n\n  return extsig\n}\n"]}