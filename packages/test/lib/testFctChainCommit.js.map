{"version":3,"sources":["../src/testFctChainCommit.js"],"names":["require","Entry","FactomCli","Chain","computeChainTxId","validateChainInstance","composeChainReveal","sha256","sha256d","nacl","sign","cli","host","port","path","debugPath","user","password","protocol","rejectUnauthorized","retry","retries","factor","minTimeout","maxTimeout","composeChainLedger","chain","firstEntry","entryHash","hash","buffer","Buffer","alloc","writeInt8","writeIntBE","timestamp","Date","now","chainIdHash","id","copy","commitWeld","concat","ecCost","composeChainCommit","ecpubkey","signature","composeChain","commit","reveal","transport","fct","Fct","getEntryCreditRate","ecRate","getAddress","addr","fromAddr","content","e","builder","extId","build","txId","ccbuffer","console","log","toString","signCommit","result","out","from","detached","verify"],"mappings":"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","file":"testFctChainCommit.js","sourcesContent":["import Fct from '@ledgerhq/hw-app-fct'\nconst { Entry } = require( 'factom/src/entry' )\nconst { FactomCli } = require('factom/src/factom-cli')\nconst { Chain, computeChainTxId, validateChainInstance, composeChainReveal } = require( 'factom/src/chain' )\nconst { sha256, sha256d } = require('factom/src/util')\n\nconst nacl = require('tweetnacl/nacl-fast').sign\n\nconst cli = new FactomCli({\n            host: 'courtesy-node.factom.com',\n\t    port: 443,\n\t    path: '/v2', // Path to V2 API. Default to /v2\n\t    debugPath: '/debug', // Path to debug API. Default to /debug\n\t    user: 'paul', // RPC basic authentication\n\t    password: 'pwd',\n\t    protocol: 'https', // http or https. Default to http\n\t    rejectUnauthorized: true, // Set to false to allow connection to a node with a self-signed certificate\n\t    retry: {\n              retries: 4,\n              factor: 2,\n              minTimeout: 500,\n              maxTimeout: 2000\n            }})\n\n//extracted from factom.Chain since it wasn't exported\nfunction composeChainLedger(chain) {\n    const firstEntry = chain.firstEntry;\n    const entryHash = firstEntry.hash();\n    const buffer = Buffer.alloc(104);\n\n    buffer.writeInt8(0);\n    buffer.writeIntBE(firstEntry.timestamp || Date.now(), 1, 6);\n    const chainIdHash = sha256d(chain.id);\n    chainIdHash.copy(buffer, 7);\n    const commitWeld = sha256d(Buffer.concat([entryHash, chain.id]));\n    commitWeld.copy(buffer, 39);\n    entryHash.copy(buffer, 71);\n    buffer.writeInt8(chain.ecCost(), 103);\n\n    return buffer;\n}\n\n//variant of factom.chain.composeChainCommit \nfunction composeChainCommit(chain, ecpubkey, signature) {\n    validateChainInstance(chain);\n    const buffer = composeChainLedger(chain)\n    return Buffer.concat([buffer, ecpubkey, signature]);\n}\n\n//variant of factom.chain.composeChainCommit\nfunction composeChain(chain, ecpubkey, signature) {\n  validateChainInstance(chain);\n  return {\n    commit: composeChainCommit(chain, ecpubkey, signature),\n    reveal: composeChainReveal(chain)\n  };\n}\n\n\nexport default async transport => {\n  const fct = new Fct(transport);\n  const ecRate = await cli.getEntryCreditRate()\n  const path = \"44'/132'/0'/0'/0'\"\n  const addr = await fct.getAddress(path)\n  const fromAddr = addr['address']\n  const content = 'Hello Ledger'\n\n  const e = Entry.builder()\n    .extId('extId', 'utf8')\n    .extId('extId++', 'utf8')\n    .content(content, 'utf8')\n    .build();\n    //.timestamp(Date.now())\n\n  const chain = new Chain(e);\n\n  const txId = computeChainTxId(chain);\n\n\n  const ccbuffer = composeChainLedger(chain)\n\n  console.log('-------------========== Entry Commit Begin ==========----------------')\n  console.log(ccbuffer.toString('hex'))\n  console.log('-------------========== Entry Commit End ==========----------------')\n\n  const result = await fct.signCommit(path, ccbuffer.toString('hex'),true);\n\n  console.log('-------------========== SIGNATURE ==========----------------')\n  console.log(result)\n  console.log('-------------========== SIGNATURE ==========----------------')\n\n  const out = composeChain(chain, Buffer.from(result['k'],'hex'),Buffer.from(result['s'],'hex'))\n\n  console.log('-------------========== Composed Chain ==========----------------')\n  console.log('commit:')\n  console.log(out['commit'].toString('hex'))\n  console.log('reveal:')\n  console.log(out['reveal'].toString('hex'))\n  console.log('-------------========== Composed Chain ==========----------------')\n\n   if(nacl.detached.verify(ccbuffer, Buffer.from(result['s'],'hex'), Buffer.from(result['k'],'hex'))) {\n      console.log(\"Chain Commit Signature IS valid!!!\")\n    } else {\n      console.log(\"Chain Commit Signature is NOT valid!!!\")\n      throw(\"Invalid Chain Commit Signature\")\n    }\n\n\n  return out\n}\n"]}