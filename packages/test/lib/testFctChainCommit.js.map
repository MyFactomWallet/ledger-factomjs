{"version":3,"sources":["../src/testFctChainCommit.js"],"names":["require","FactomCli","Entry","Chain","computeChainTxId","validateChainInstance","composeChainLedger","composeChain","cli","host","port","path","debugPath","user","password","protocol","rejectUnauthorized","retry","retries","factor","minTimeout","maxTimeout","transport","fct","Fct","getAddress","addr","ecaddr","content","e","builder","extId","timestamp","Date","now","build","chain","txId","ccbuffer","console","log","toString","signCommit","result","out"],"mappings":";;;;;;;;;;;;;;AAAA;;;;;;eACsBA,QAAQ,uBAAR,C;IAAdC,S,YAAAA,S;;gBACUD,QAAS,kBAAT,C;IAAVE,K,aAAAA,K;;gBACqFF,QAAS,kBAAT,C;IAArFG,K,aAAAA,K;IAAOC,gB,aAAAA,gB;IAAkBC,qB,aAAAA,qB;IAAuBC,kB,aAAAA,kB;IAAoBC,Y,aAAAA,Y;;AAE5E,IAAMC,MAAM,IAAIP,SAAJ,CAAc;AACxBQ,QAAM,0BADkB;AAExBC,QAAM,GAFkB;AAGxBC,QAAM,KAHkB,EAGX;AACbC,aAAW,QAJa,EAIH;AACrBC,QAAM,MALkB,EAKV;AACdC,YAAU,KANc;AAOxBC,YAAU,OAPc,EAOL;AACnBC,sBAAoB,IARI,EAQE;AAC1BC,SAAO;AACLC,aAAS,CADJ;AAELC,YAAQ,CAFH;AAGLC,gBAAY,GAHP;AAILC,gBAAY;AAJP;AATiB,CAAd,CAAZ;;;sFAkBe,iBAAMC,SAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AACPC,eADO,GACD,IAAIC,kBAAJ,CAAQF,SAAR,CADC;AAEPX,gBAFO,GAEA,mBAFA;AAAA;AAAA,mBAGMY,IAAIE,UAAJ,CAAed,IAAf,CAHN;;AAAA;AAGPe,gBAHO;AAIPC,kBAJO,GAIED,KAAK,SAAL,CAJF;AAKPE,mBALO,GAKG,cALH;AAOPC,aAPO,GAOH3B,MAAM4B,OAAN,GACPC,KADO,CACD,OADC,EACQ,MADR,EAEPA,KAFO,CAED,SAFC,EAEU,MAFV,EAGPH,OAHO,CAGCA,OAHD,EAGU,MAHV,EAIPI,SAJO,CAIGC,KAAKC,GAAL,EAJH,EAKPC,KALO,EAPG;AAcPC,iBAdO,GAcC,IAAIjC,KAAJ,CAAU0B,CAAV,CAdD;AAgBPQ,gBAhBO,GAgBAjC,iBAAiBgC,KAAjB,CAhBA;AAkBPE,oBAlBO,GAkBIhC,mBAAmB8B,KAAnB,CAlBJ;;;AAoBbG,oBAAQC,GAAR,CAAY,0CAAZ;AACAD,oBAAQC,GAAR,CAAYF,SAASG,QAAT,CAAkB,KAAlB,CAAZ;AACAF,oBAAQC,GAAR,CAAY,wCAAZ;;AAtBa;AAAA,mBAwBQjB,IAAImB,UAAJ,CAAe/B,IAAf,EAAqB2B,SAASG,QAAT,CAAkB,KAAlB,CAArB,EAA8C,IAA9C,CAxBR;;AAAA;AAwBPE,kBAxBO;;;AA0BbJ,oBAAQC,GAAR,CAAY,8CAAZ;AACAD,oBAAQC,GAAR,CAAYG,MAAZ;AACAJ,oBAAQC,GAAR,CAAY,8CAAZ;;AAEMI,eA9BO,GA8BDrC,aAAa6B,KAAb,EAAoBT,MAApB,EAA4BgB,OAAO,GAAP,CAA5B,CA9BC;;;AAgCbJ,oBAAQC,GAAR,CAAY,4CAAZ;AACAD,oBAAQC,GAAR,CAAY,SAAZ;AACAD,oBAAQC,GAAR,CAAYI,IAAI,QAAJ,EAAcH,QAAd,CAAuB,KAAvB,CAAZ;AACAF,oBAAQC,GAAR,CAAY,SAAZ;AACAD,oBAAQC,GAAR,CAAYI,IAAI,QAAJ,EAAcH,QAAd,CAAuB,KAAvB,CAAZ;AACAF,oBAAQC,GAAR,CAAY,0CAAZ;;AArCa,6CAuCNI,GAvCM;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","file":"testFctChainCommit.js","sourcesContent":["import Fct from '@factoid.org/hw-app-fct'\nconst { FactomCli } = require('factom/src/factom-cli')\nconst { Entry } = require( 'factom/src/entry' )\nconst { Chain, computeChainTxId, validateChainInstance, composeChainLedger, composeChain } = require( 'factom/src/chain' )\n\nconst cli = new FactomCli({\n  host: 'courtesy-node.factom.com',\n  port: 443,\n  path: '/v2', // Path to V2 API. Default to /v2\n  debugPath: '/debug', // Path to debug API. Default to /debug\n  user: 'paul', // RPC basic authentication\n  password: 'pwd',\n  protocol: 'https', // http or https. Default to http\n  rejectUnauthorized: true, // Set to false to allow connection to a node with a self-signed certificate\n  retry: {\n    retries: 4,\n    factor: 2,\n    minTimeout: 500,\n    maxTimeout: 2000\n  }\n})\n\n\nexport default async transport => {\n  const fct = new Fct(transport);\n  const path = \"44'/132'/0'/0'/0'\"\n  const addr = await fct.getAddress(path)\n  const ecaddr = addr['address']\n  const content = 'Hello Ledger'\n\n  const e = Entry.builder()\n    .extId('extId', 'utf8')\n    .extId('extId++', 'utf8')\n    .content(content, 'utf8')\n    .timestamp(Date.now())\n    .build();\n\n  const chain = new Chain(e);\n\n  const txId = computeChainTxId(chain);\n\n  const ccbuffer = composeChainLedger(chain)\n\n  console.log('========== Chain Ledger Begin ==========')\n  console.log(ccbuffer.toString('hex'))\n  console.log('========== Chain Ledger End ==========')\n\n  const result = await fct.signCommit(path, ccbuffer.toString('hex'),true);\n\n  console.log('========== Chain Commit Signature ==========')\n  console.log(result)\n  console.log('========== Chain Commit Signature ==========')\n\n  const out = composeChain(chain, ecaddr, result['s'])\n\n  console.log('========== Composed Chain Begin ==========')\n  console.log('commit:')\n  console.log(out['commit'].toString('hex'))\n  console.log('reveal:')\n  console.log(out['reveal'].toString('hex'))\n  console.log('========== Composed Chain End ==========')\n\n  return out\n}\n"]}