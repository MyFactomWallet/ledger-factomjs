{"version":3,"sources":["../src/index-browser.js"],"names":["TransportU2F","create","Transport","isSupported","supported","Error","setDebugMode","createU2FTransport","transport","account","change","address_index","display","fct","Fct","path","getAddress","result","getFctAddr","tx_hex","signTransaction","signTx","getAppConfiguration","btn","document","createElement","textContent","body","appendChild","errorEl","style","color","pre","onclick","console","error","e","message","close","btn2","errorEl2","pre2","require","Transaction","amount","ecRate","addr","fromAddr","toAddr","numinputs","numoutputs","fees","builder","input","output","build","computeRequiredFees","rcdSignatureLength","numberOfSignatures","t","log","marshalBinarySig","toString","ts","rcdSignature","Buffer","from"],"mappings":";;;;;;;;;;;;;;;;sFAKO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAEiBA,yBAAaC,MAAb,EAFjB;;AAAA;AAEDC,qBAFC;AAAA;AAAA,mBAGmBA,UAAUC,WAAV,EAHnB;;AAAA;AAGCC,qBAHD;;AAAA,gBAIAA,SAJA;AAAA;AAAA;AAAA;;AAAA,kBAKK,IAAIC,KAAJ,CAAU,kCAAV,CALL;;AAAA;;AAQLH,sBAAUI,YAAV,CAAuB,IAAvB;AARK,6CASEJ,SATF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;kBAAeK,kB;;;;;;uFAaf,kBAA0BC,SAA1B,EAAqCC,OAArC,EAA8CC,MAA9C,EAAsDC,aAAtD,EAAqEC,OAArE;AAAA;AAAA;AAAA;AAAA;AAAA;AACCC,eADD,GACO,IAAIC,kBAAJ,CAAQN,SAAR,CADP;AAECO,gBAFD,GAEQ,aAAaN,OAAb,IAAsB,IAAI,IAAJ,GAAWC,MAAjC,IAAyC,IAAI,IAAJ,GAAWC,aAApD,IAAmE,IAAI,GAF/E;AAAA;AAAA,mBAGgBE,IAAIG,UAAJ,CAAeD,IAAf,EAAoBH,WAAS,KAA7B,CAHhB;;AAAA;AAGCK,kBAHD;AAAA,8CAKEA,MALF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;kBAAeC,U;;;;;;uFAQf,kBAAsBV,SAAtB,EAAiCC,OAAjC,EAA0CC,MAA1C,EAAkDC,aAAlD,EAAiEQ,MAAjE;AAAA;AAAA;AAAA;AAAA;AAAA;AACCN,eADD,GACO,IAAIC,kBAAJ,CAAQN,SAAR,CADP;AAECO,gBAFD,GAEQ,aAAaN,OAAb,IAAsB,IAAI,IAAJ,GAAWC,MAAjC,IAAyC,IAAI,IAAJ,GAAWC,aAApD,IAAmE,IAAI,GAF/E;AAAA;AAAA,mBAGgBE,IAAIO,eAAJ,CAAoBL,IAApB,EAA0BI,MAA1B,CAHhB;;AAAA;AAGCF,kBAHD;AAAA,8CAKEA,MALF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;kBAAeI,M;;;;;;uFAQf,kBAAmCb,SAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AACCK,eADD,GACO,IAAIC,kBAAJ,CAAQN,SAAR,CADP;AAAA;AAAA,mBAEgBK,IAAIS,mBAAJ,EAFhB;;AAAA;AAECL,kBAFD;AAAA,8CAGEA,MAHF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;kBAAeK,mB;;;;;AAlCtB;;AAEA;;;;AACA;;;;;;AAmCC;;AAID,IAAMC,MAAMC,SAASC,aAAT,CAAuB,QAAvB,CAAZ;AACAF,IAAIG,WAAJ,GAAkB,aAAlB;AACAF,SAASG,IAAT,CAAcC,WAAd,CAA0BL,GAA1B;AACA,IAAMM,UAAUL,SAASC,aAAT,CAAuB,MAAvB,CAAhB;AACAI,QAAQC,KAAR,CAAcC,KAAd,GAAsB,MAAtB;AACA,IAAMC,MAAMR,SAASC,aAAT,CAAuB,KAAvB,CAAZ;AACAO,IAAIJ,WAAJ,CAAgBC,OAAhB;AACAL,SAASG,IAAT,CAAcC,WAAd,CAA0BI,GAA1B;AACAT,IAAIU,OAAJ,4EAAc;AAAA;;AAAA;AAAA;AAAA;AAAA;AACZJ,kBAAQH,WAAR,GAAsB,EAAtB;;AADY;AAAA;AAAA,iBAIcnB,oBAJd;;AAAA;AAIJC,oBAJI;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAWR0B,kBAAQC,KAAR,CAAc,mCAAmCjB,UAAnC,GAAgD,GAA9D;AACAW,kBAAQH,WAAR,GAAsBU,EAAEC,OAAxB;AAZQ;;AAAA;AAAA;;AAeR7B,oBAAU8B,KAAV;AAfQ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAd;;AAoBA,IAAMC,OAAOf,SAASC,aAAT,CAAuB,SAAvB,CAAb;AACAc,KAAKb,WAAL,GAAmB,kBAAnB;AACAF,SAASG,IAAT,CAAcC,WAAd,CAA0BW,IAA1B;AACA,IAAMC,WAAWhB,SAASC,aAAT,CAAuB,OAAvB,CAAjB;AACAe,SAASV,KAAT,CAAeC,KAAf,GAAuB,MAAvB;AACA,IAAMU,OAAOjB,SAASC,aAAT,CAAuB,MAAvB,CAAb;AACAgB,KAAKb,WAAL,CAAiBY,QAAjB;AACAhB,SAASG,IAAT,CAAcC,WAAd,CAA0Ba,IAA1B;AACAF,KAAKN,OAAL,4EAAe;AAAA;;AAAA;AAAA;AAAA;AAAA;AACbO,mBAASd,WAAT,GAAuB,EAAvB;;AADa;AAIPlB,qBAJO,GAIKD,oBAJL;AAAA,qBAOamC,QAAS,wBAAT,CAPb,EAOHC,WAPG,YAOHA,WAPG;AASLC,gBATK,GASI,OATJ;AAULC,gBAVK,GAUI,KAVJ,EAUU;;AAVV;AAAA,iBAWQhC,IAAIG,UAAJ,CAAeR,WAAf,EAAyB,CAAzB,EAA2B,CAA3B,EAA6B,CAA7B,EAA+B,KAA/B,CAXR;;AAAA;AAWLsC,cAXK;AAYLC,kBAZK,GAYMD,KAAK,SAAL,CAZN;AAcLE,gBAdK,GAcI,sDAdJ;AAgBLC,mBAhBK,GAgBO,CAhBP;AAiBLC,oBAjBK,GAiBQ,CAjBR;AAmBLC,cAnBK,GAmBER,YAAYS,OAAZ,GACVC,KADU,CACJN,QADI,EACMH,MADN,EAEVU,MAFU,CAEHN,MAFG,EAEKJ,MAFL,EAGVW,KAHU,GAIVC,mBAJU,CAIUX,MAJV,EAIkB,EAAEY,oBAAoBP,cAAc,KAAK,EAAnB,CAAtB,EAA8CQ,oBAAoBT,SAAlE,EAJlB,CAnBF;AA0BLU,WA1BK,GA0BDhB,YAAYS,OAAZ,GACPC,KADO,CACDN,QADC,EACSH,SAAOO,IADhB,EAEPG,MAFO,CAEAN,MAFA,EAEQJ,MAFR,EAGPW,KAHO,EA1BC;;;AAgCXrB,kBAAQ0B,GAAR,CAAY,wDAAZ;AACA1B,kBAAQ0B,GAAR,CAAYD,EAAEE,gBAAF,CAAmBC,QAAnB,CAA4B,KAA5B,CAAZ;AACA5B,kBAAQ0B,GAAR,CAAY,wDAAZ;;AAlCW;AAAA,iBAqCUvC,OAAOb,WAAP,EAAiB,CAAjB,EAAmB,CAAnB,EAAqB,CAArB,EAAuBmD,EAAEE,gBAAF,CAAmBC,QAAnB,CAA4B,KAA5B,CAAvB,CArCV;;AAAA;AAqCL7C,gBArCK;;AAsCX,cAAIA,MAAJ,EAAY;AACF8C,cADE,GACGpB,YAAYS,OAAZ,CAAoBO,CAApB,EACNK,YADM,CACOC,OAAOC,IAAP,CAAYjD,OAAO,GAAP,CAAZ,EAAwB,KAAxB,CADP,EACuCgD,OAAOC,IAAP,CAAYjD,OAAO,GAAP,CAAZ,EAAwB,KAAxB,CADvC,EAENsC,KAFM,EADH;;AAIRrB,oBAAQ0B,GAAR,CAAY3C,MAAZ;AACAuB,qBAASd,WAAT,GAAuBT,OAAO,GAAP,CAAvB;;AAEA;;AAGD;AAhDQ;AAAA;;AAAA;AAAA;AAAA;;AAkDTiB,kBAAQC,KAAR,CAAc,+BAA+Bd,MAA/B,GAAwC,GAAtD;AACAmB,mBAASd,WAAT,GAAuBU,EAAEC,OAAzB;AAnDS;;AAAA;AAAA;;AAsDT7B,oBAAU8B,KAAV;AAtDS;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAf","file":"index-browser.js","sourcesContent":["import \"babel-polyfill\";\n\nimport TransportU2F from \"@ledgerhq/hw-transport-u2f\";\nimport Fct from \"@factoid.org/hw-app-fct\";\n\nexport async function createU2FTransport() {\n  //first, see if the u2f is supported\n  let Transport = await TransportU2F.create();\n  const supported = await Transport.isSupported();\n  if (!supported) {\n      throw new Error(\"Transport.isSupported() is false\");\n  }\n\n  Transport.setDebugMode(true);\n  return Transport\n}\n\n\nexport async function getFctAddr(transport, account, change, address_index, display) {\n  const fct = new Fct(transport);\n  const path = \"44'/131'\" + account||0 + \"'/\" + change||0 + \"'/\" + address_index||0 + \"'\" \n  const result = await fct.getAddress(path,display||false);\n  //assert(address.isValidAddress(result['address']))\n  return result;\n}\n\nexport async function signTx(transport, account, change, address_index, tx_hex) {\n  const fct = new Fct(transport);\n  const path = \"44'/131'\" + account||0 + \"'/\" + change||0 + \"'/\" + address_index||0 + \"'\" \n  const result = await fct.signTransaction(path, tx_hex);\n  //assert(address.isValidAddress(result['address']))\n  return result;\n}\n\nexport async function getAppConfiguration(transport) {\n  const fct = new Fct(transport);\n  const result = await fct.getAppConfiguration();\n  return result;\n};\n\n\n\nconst btn = document.createElement(\"button\");\nbtn.textContent = \"Get Address\";\ndocument.body.appendChild(btn);\nconst errorEl = document.createElement(\"code\");\nerrorEl.style.color = \"#a33\";\nconst pre = document.createElement(\"pre\");\npre.appendChild(errorEl);\ndocument.body.appendChild(pre);\nbtn.onclick = async () => {\n  errorEl.textContent = \"\";\n\n  try {\n      let transport = await createU2FTransport()\n      //const result = await getFctAddr(transport,0,0,0,false);\n      //if (result) {\n      //  console.log(result);\n      //  errorEl.textContent = result['address']\n      //}\n    } catch (err) {\n      console.error(\"Failed getFctAddr from Ledger \" + getFctAddr + \":\", err);\n      errorEl.textContent = e.message;\n      throw err;\n    } finally {\n      transport.close();\n    }\n}\n\n\nconst btn2 = document.createElement(\"button2\");\nbtn2.textContent = \"Sign Transaction\";\ndocument.body.appendChild(btn2);\nconst errorEl2 = document.createElement(\"code2\");\nerrorEl2.style.color = \"#a33\";\nconst pre2 = document.createElement(\"pre2\");\npre2.appendChild(errorEl2);\ndocument.body.appendChild(pre2);\nbtn2.onclick = async () => {\n  errorEl2.textContent = \"\";\n\n  try {\n    let transport = createU2FTransport()\n\n\n    const { Transaction } = require( 'factom/src/transaction' )\n    \n    const amount = 1000000\n    const ecRate = 24000 //await cli.getEntryCreditRate()\n    const addr = await fct.getAddress(transport,0,0,0,false)\n    const fromAddr = addr['address']\n\n    const toAddr = 'FA3nr5r54AKBZ9SLABS3JyRoGcWMVMTkePW9MECKM8shMg2pMagn'\n\n    const numinputs = 1\n    const numoutputs = 1\n\n    const fees = Transaction.builder()\n      .input(fromAddr, amount)\n      .output(toAddr, amount)\n      .build()\n      .computeRequiredFees(ecRate, { rcdSignatureLength: numoutputs * (33 + 64), numberOfSignatures: numinputs })\n\n\n    const t = Transaction.builder()\n      .input(fromAddr, amount+fees)\n      .output(toAddr, amount)\n      .build()\n\n\n    console.log('-------------========== TXN ==========----------------')\n    console.log(t.marshalBinarySig.toString('hex'))\n    console.log('-------------========== TXN ==========----------------')\n\n\n    const result = await signTx(transport,0,0,0,t.marshalBinarySig.toString('hex'));\n    if (result) {\n        const ts = Transaction.builder(t)\n            .rcdSignature(Buffer.from(result['r'],'hex'), Buffer.from(result['s'],'hex'))\n            .build()\n        console.log(result);\n        errorEl2.textContent = result['s']\n        \n        //submit the signed transaction (i.e. ts) to factomd... \n        \n        \n      }\n    } catch (err) {\n      console.error(\"Failed signTx from Ledger \" + signTx + \":\", err);\n      errorEl2.textContent = e.message;\n      throw err;\n    } finally {\n      transport.close();\n    }\n}\n"]}